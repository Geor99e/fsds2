---
title: "Foundations (Pt. 1)"
format:
  html:
    code-fold: true
#jupyter: python3
---

## Overview

This week we will be quickly covering the fundamentals of Python programming, while developing a critical appreciation of data science as an ongoing 'process' that calls for iterative improvement and deeper reflection. We will be contextualising computers within a wider landscape of geographical/spatial research. We will also be looking to the Unix Shell/Terminal as a 'power user feature' that is often overlooked by novice data scientists. And we will be (briefly) reviewing the basics of Python with a focus on simple data structures. We're focussing here on how computers 'think' and how that differs from what you might be expecting as an intelligen human being! 

::: {.callout-important}
## Learning Objectives

1. A review of basic Python syntax and operators.
2. An introduction to making use of Git+GitHub.
3. An introdution to making use of the Shell/Terminal.
4. An understanding of how none of this all that new.
::: 

So we will be contextualising all of this within the longer history of the study of geography (or planning!) through computation. I hope to convince you that many of the problems we face today are _not_ new and why that should encourage you to continue to do the readings!

## Lectures

This week is very busy because we need to cover off the basics for those of you who were unable to engage with *Code Camp*, while recapping only the crucial bits for those of you who *were* able to do so.

Come to class prepared to present/discuss:

| Session | Video | Presentation | 
| :------ | :---- | :----------- | 
| Computers in Urban Studies | In Class | [Slides](../lectures/2.1-Computers_in_Planning_and_Geography.qmd) | 
| Principles of Programming | In Class | [Slides](../lectures/2.2-Principles_of_Programming.qmd) | 
| Python: the Basics (Part 1) | [Video]({{< var vids.basics1 >}}) | [Slides](../lectures/2.3-Python_the_Basics-1.qmd) | 
| Python: the Basics (Part 2) | [Video]({{< var vids.basics2 >}}) | [Slides](../lectures/2.4-Python_the_Basics-2.qmd) | 
| Lists | [Video]({{< var vids.lists >}})  | [Slides](../lectures/2.5-Lists.qmd) | 
| Iteration| [Video]({{< var vids.iteration >}}) | [Slides](../lectures/2.6-Iteration.qmd) | 
| The Command Line | [Video]({{< var vids.cli >}}) | [Slides](../lectures/2.7-The_Command_Line.qmd) | 
| Getting Stuck into Git | [Video]({{< var vids.git >}}) | [Slides](../lectures/2.8-Git.qmd) | 

## Other Prep

- Come to class prepared to present/discuss:
  - @Burton:1963 <[URL](https://doi.org/10.1111/j.1541-0064.1963.tb00796.x)>
  - @ArribasBel:2018 <[URL](https://doi.org/10.1111/gec3.12403)>
- Complete the [short Moodle quiz]({{< var quiz.week2 >}}) associated with this week's activities.

::: {.callout-tip}

## Readings

You should read @Burton:1963 and @ArribasBel:2018 with a view to seeing that 'there is nothing new under the sun': we tend to think that the challenges we face now in terms of data volumes and complexity are novel, but *they are not*. Indeed, here's John Graham-Cumming keynoting a 2012 conference talking about the Lyons Tea Company and how its programmers invented Dykstra's shortest path algorithm more than 20 years before Dykstra did!

:::

{{< video https://youtu.be/pcBJfkE5UwU?si=l6GeLIm2Ilzs4p0f width="500" height="350" >}}

### Installing the Programming Environment

:::{.callout-warning}
This week's practical requires you to have completed installation of the programming environment. Make sure you have [completed setup of the environment](https://jreades.github.io/sds_env/setup/env.html).
:::

In principle, we fully support students who want to do things their own way; however, we are *also* not able to sit down with each person and develop a custom learning environment. With Docker, we can give you full access to the cutting-edge Python libraries and other tools needed to 'do' spatial data science, while only needing to install 1 application, download 1 (big) file, and run 1 command. When it works... There *are* alternatives, but there are *more* things that can go wrong and they can go wrong in more complex ways. Solving the Anaconda environment can take several hours _before_ it even starts installing. 

So here's what we ask: if you *already* know what to do with an Anaconda YAML file, or can work out how to edit the Dockerfile and build a new image, then by all means knock yourself out! We are _not_ going to tell you that cannot do something, and eventually you _will_ need to learn to stand on your own two feet. But please do not expect us to support you individually if you've gone off and done your own thing and 'it doesn't work'. OK? We'll offer advice (if we can) but only if no one else is waiting for help.

## Practical

This week's practical will take you through the fundamentals of Python, including the use of simple^[*Note*: simple does *not* mean 'easy'! Just because we say something is 'basic' or 'simple' does *not* mean that we think it is straightforward for someone learning to code for the first time!] Boolean logic and lists. However, if you have *not yet completed Code Camp* (or were not aware of it!), then you will benefit *enormously* from tackling the following sessions:

1. [The Basics](https://jreades.github.io/code-camp/lessons/The_Basics.html)
2. [Boolean Logic](https://jreades.github.io/code-camp/lessons/Boolean_Logic.html)
3. [Lists](https://jreades.github.io/code-camp/lessons/Lists.html)

To run the code for these sessions you can:

1. Follow the instructions for running these [in Google's Collaboratory](https://jreades.github.io/sds_env/req/code_camp.html); or 
2. Create a new Notebook in Docker (`File` > `New` > `Notebook`) and copy+paste the code into new `Code` cells.

::: {.callout-tip}
## Connections

The practical focusses on:

- Ensuring that you are set up with Git/GitHub
- Reviewing Python basics
- Reviewing Python lists and logic
:::

To access the practical:

```{python}
#| output: asis
#| echo: false
#| code-fold: false

prac = "Practical-02-Foundations_1"

print("1. [Preview]({{< var module.web >}}practicals/" + prac + ".html)")
print("2. [Download]({{< var module.web >}}practicals/" + prac + ".ipynb)")

```

## References

---
title: "Objects"
---

## Overview

This week we will see how Python actually works by looking beyond simple functions and into methods, classes, and the outlines of Object Oriented Design and Programming (OOD/OOP). We'll also look at what to do when 'things go wrong', because they will, but sometimes we want that to blow up the application while other times we want Python to handle the 'exception' gracefully. Learning to read Exceptions is essential to *debugging* code: the one thing that almost never works when you get an exception is ignoring it.

::: {.callout-important}
## Learning Objectives

1. Develop *enough* of an understanding of classes and inheritance that you can make effective use of Python.
2. Develop an understanding of how to read and write Exceptions so as to be able to create robust code.
3. Under the process of moving code from in-line scripting, to functions, to packages of functions.
4. Begin developing an appreciation of the *substantive* concerns of the module (data, ethics, bias, and the risks of 'experts' who 'know it all').
::: 

This week deals with 'objects' and 'classes', which is fundamental to mastering the Python programming language: in Python, *everything* is an object, you just didn't need to know it until now. Understanding how classes and objects work is essential to using Python effectively, but it will also make you a better programmer in any language because it will help you to think about how data and code work _together_ to achieve your goals. 

## Lectures

Come to class prepared to present:

| Session | Video | Presentation | 
| :------ | :---- | :----------- | 
| Methods | [Video]({{< var vids.methods >}}) | [Slides](../lectures/4.1-Methods.qmd) | 
| Classes | [Video]({{< var vids.classes >}}) | [Slides](../lectures/4.2-Classes.qmd) | 
| Design | [Video]({{< var vids.design >}}) | [Slides](../lectures/4.3-Design.qmd) | 
| Exceptions | [Video]({{< var vids.exceptions >}}) | [Slides](../lectures/4.4-Errors.qmd) | 

## Other Prep

- Come to class prepared to present/discuss:
  - @Cox:2016 <[PDF](http://insideairbnb.com/reports/how-airbnbs-data-hid-the-facts-in-new-york-city.pdf)>
  - @dignazio:2020, chap. 5, *Unicorns Janitors, Ninjas, Wizards, and Rock Stars* <[URL](https://ucl.primo.exlibrisgroup.com/discovery/fulldisplay?docid=alma9931206723604761&context=L&vid=44UCL_INST:UCL_VU2&lang=en&search_scope=UCLLibraryCatalogue&adaptor=Local%20Search%20Engine&isFrbr=true&tab=UCLLibraryCatalogue&query=any,contains,D%5C%27Ignazio%20Data%20Feminism&sortby=date_d&facet=frbrgroupid,include,9041340239229546206&offset=0)>
- We'll aim to do the 'Student Dialogue' Mentimeter poll at the start of class.

::: {.callout-tip}
## Connections

We're now going to shift our focus slightly towards more critical takes on data and data science. These are *not* by people who can't 'do' data science, rather they point to ways in which neither the data, nor the people who process them, are neutral or objective in the way that we often like to think they are. @Cox:2016 is also a first introduction to the underlying data that we'll be working with over the rest of term. @dignazio:2020 should be getting you thinking about how 'cleaning' is not just about hygiene but has real implications for what you can and will find in your data: data is often a lot less 'tidy' than `tidyr` might lead you think!

:::

## Practical

:::{.callout-warning}

This practical will lead you through the process of converting inline scripts into functions and, ultimately, into a simple package. The last parts of the practical are *optional* -- creating classes in hierarchies is integral to how Python works, but many data scientists will rarely need to write their own classes... they just make use of classes written by others (which is why understanding what they *are* is important, but being able to write your own is a little less so).

::: 

::: {.callout-tip}
## Connections

The practical focusses on:

- Bedding in the 'data thinking' from last week's practical.
- Creating functions to perform repetitive tasks.
- Packaging these functions up and accessing via the appropriate namespace.
- Implementing a few simple classes so that you understand the basics of how they work.
:::

To access the practical:

```{python}
#| output: asis
#| echo: false
#| code-fold: false

prac = "Practical-04-Objects"

print("1. [Preview]({{< var repo.prac >}}/practicals/" + prac + ".{{< var repo.ext >}})")
print("2. [Download]({{< var repo.raw >}}/practicals/" + prac + ".ipynb)")

```

## References

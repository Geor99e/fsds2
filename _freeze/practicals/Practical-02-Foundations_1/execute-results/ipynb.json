{
  "hash": "c3b64c3d730832d594f7f007529177c3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Practical 2: Foundations (Part 1)'\nsubtitle: \"Getting to grips with the 'Basics'\"\nfilters:\n  - qna\n  - quarto\n---\n\n\n\n\n\n\n\n\n| Complete | Part 1: Foundations | Part 2: Data | Part 3: Analysis |     |\n| :------- | :------------------ | :----------- | :--------------- | --: |\n| 10% | &#9619;&#9619;&#9619;&#9617;&#9617;&#9617;&#9617;&#9617; | &#9617;&#9617;&#9617;&#9617;&#9617;&#9617; | &#9617;&#9617;&#9617;&#9617;&#9617;&#9617; | 2/10\n\nThis notebook is focussed on ensuring that you're able to run Jupyter notebooks locally (i.e. on youu own computer) in Docker and are comfortable with the basics of Python: if you've already done Code Camp then this will be a refresher and you'll have plenty of time to get to grips with Git and GitHub, which often presents significant practical challenges. You *should* find this notebook quite straightforward, but take any challenges as a sign that you need to keep practicing since subsequent weeks will build on these foundational concepts.\n\n::: {.callout-warning}\n\n### Remember\n\nPlease save your work regularly, or prepare to be disappointed. This will be my only reminder about this!\n\n:::\n\n# Setting Up\n\nI'm going to assume that you've got Docker installed and have managed to 'pull' the `{{< var docker.all >}}` or `{{< var docker.mac >}}` image at this point. If not, this is your **most urgent** priority. Please make one of us aware of your situation and we'll do our best to get you going.\n\n## Is the Container Running?\n\nDocker will happily keep a container running in the background even if you close every open window. So how do you know if the `sds2023` container is already running? There are two ways:\n\n1. Open the Docker Dashboard/Desktop from the menu and make sure that you select the `Containers` tab on the left (it may be hidden by a message from Docker about upcoming conferences). You _should_ see something like this if the container is _running_ and _available_:\n\n![sds2023 container running](./img/Running_Container.png)\n\n2. From the Terminal/Power Shell you should be able to run: `docker ps`. This will give you output something like this:\n\n![sds2023 container running from Terminal](./img/Running_Container_2.png)\n\nIf the `sds2023` *container* is not running then you'll need to run the startup command (`docker run...`) covered in the [last practical session](Practical-01-Getting_Started.qmd)\n\n## Connect to Jupyter Lab\n\nOnce you know the container is running you can connected to Jupyter Lab on [localhost:8888](http://localhost:8888/lab/tree/work/) and should see something like this:\n\n![Screenshot of Jupyter Lab](https://github.com/jreades/fsds/raw/master/practicals/img/1.8-Jupyter_Lab.png){height=300}\n\nYou're connected and can go to @sec-notebook. \n\n\n## Getting the Notebook {#sec-notebook}\n\n### Downloading from GitHub\n\nOn the [Week 2 of FSDS page](https://jreades.github.io/fsds/sessions/week2.html#practical) you'll see that there is a 'preview' link and a a 'download' link in the [Practical section](https://jreades.github.io/fsds/sessions/week2.html#practical). If you click the preview link you will be taken to the GitHub page for the notebook where it has been 'rendered' as a web page by GitHub. But to make the notebook useable on *your* computer, you need to download the RAW notebook content.\n\nSo now:\n\n1. Click on the `Download the Notebook` link.\n2. When you see a page of raw code, select `File` then `Save Page As...`.\n3. Save the file somewhere easy to find (e.g. Downloads or Desktop). \n4. Notice that *most* browsers will save the file as `Practical-02-Foundations_1.ipynb.txt`; they have *added* `.txt` to the file name without asking. You will need to correct this by *either*: 1) changing the name in the command line using `mv <name_of_practical>.ipynb.txt <name_of_practical>.ipynb` (you can even do this in Jupyter Lab *after* completing @sec-available); or 2) renaming the file using the Finder (Mac) or Windows Explorer.\n\n### Making the Notebook Available to Jupyter Lab {#sec-available}\n\nYou now need to place the notebook where Jupyter Lab can access it. There is only _one_ place that you can do this, and that is where you ran the `docker run ...` command which **mounted** the current working directory to the `work` directory. Remember that the startup command is something like:\n\n```shell\ndocker run ... -v \"$(pwd):/home/jovyan/work\" ...\n```\n\nThe `-v` (short for *volume*) tells Docker what part of _your_ computer (`$(pwd)`) to connect to container (`/home/jovyan/work`). `pwd` is short-hand for 'working directory' and is the location where you ran the Docker startup command! So we're talking about the location on _your_ computer when you access the `work` folder from within Docker/Jupyter Lab:\n\n- On a Mac it will most likely be your `$HOME` directory (e.g. `/Users/your_username/`).\n- On a Windows machine it _may_ be your `$HOME` directory but we can't promise. See the steps above for trying to ensure this is where you end up.\n\nPerhaps a video will help clarify?\n\n\n\n\n\n\n\n\n{{< video https://www.youtube.com/embed/5IkwUrYTY78 >}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### Staring the Notebook\n\nFrom _within Jupyter Lab_ you should now be able to start the notebook:\n\n1. Make sure Jupyter Lab is showing (&#128193;`/work/`) in the left-hand menu.\n2. Navigate to the location that you saved `Practical-02-Foundations_1.ipynb`.\n3. Double-click the file and you should see the notebook appear on the right-hand side.\n\nNow you can run code directly in your browser, so let's try it!\n\n# Hello World!\n\nNearly every introduction to programming course starts with the famous 'Hello World!', so why do anything different? Try typing the below into the empty 'cell' that has appeared and then clicking on the right-triangle (&#9654;) in the area above between the clipboard &#128203; for copying and the &#9632; for stopping running code:\n\n```python\nprint('Hello World!')\n```\n\nHopefully, the following has appeared directly below the code:\n\n::: {#01524b48 .cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n You can always click the &#9654; icon above, but it will be much _faster_ to get into the habit of type `Ctrl`+`Enter` instead when you have placed your cursor in a code cell. This is also how to turn a Markdown cell back into display text.\n\n:::\n\n# Python Variables\n\n::: {.callout-note}\n### Connections\n\n This is a short recap of materials covered in this week's video on [Python: the Basics](https://jreades.github.io/fsds/sessions/week2.html#lectures) as well as Code Camp's [The Basics](https://jreades.github.io/code-camp/lessons/The_Basics.html)\n\n:::\n\n## Variables Names\n\n::: {.callout-note}\n### Look closer!\n\n Pay attention to the *colour* of the code, while it might be subtle (a single character in a different colour), it is giving you clues as to where problems might be found because it means the Python 'interpreter' is reading what you wrote differently from how you *probably* meant it...\n\n:::\n    \n_Some_ of the lines of code below are valid Python, but others _may_ have a problem that will cause Python to generate an error. Each error can be fixed by changing _one_ character. See if you can work out which ones you need to fix **before running the code**:\n\n::: {.qna}\n\n#### Question\n\n```python\nPi = 3.14159      # Valid Python\npi = 3.14159      # ??\n3pi = 3.14159*3   # ??\npi_2 = 3.14159**2 # ??\npi^2 = 3.14159**2 # ??\nmy radius = 5     # ??\nMy_Radius = 5     # ??\nclass = 5         # ??\n```\n\n#### Answer\n\n::: {#4786e4a0 .cell execution_count=2}\n``` {.python .cell-code}\nPi = 3.14159      # Valid Python\npi = 3.14159      # Valid Python\npi3 = 3.14159*3   # Invalid, variable starts with a number\npi_2 = 3.14159**2 # Valid Python\npi2 = 3.14159**2  # Invalid, 'hat' character in variable name\nmy_radius = 5     # Invalid, space in variable name\nMy_Radius = 5     # Valid Python\nmclass = 5        # Invalid, reserved word\n```\n:::\n\n\n:::\n\n## Variable Types\n\n**Before running the code** below, work out what the output will be for _each_ of the `print` commands below when the code is executed. Write them as comments on the same line as the code (after the `#`, see example).\n\n::: {.qna}\n\n#### Question\n\n```python\nx = '2'\ny = z = 2\n\nprint(y * z)    # 4\nprint(x * y)    # ??\nprint(x + x)    # ??\nprint((y+z)**z) # ??\nprint(y/(y+z))  # ??\n\nprint( type(x * y) )    # ??\nprint( type(y * z) )    # ??\nprint( type((y+z)**z) ) # ??\nprint( type(y/(y+z)) )  # ??\n```\n\n#### Answer\n\n::: {#1ee89376 .cell execution_count=3}\n``` {.python .cell-code}\nx = '2'\ny = z = 2\n\nprint(y * z)    # 4\nprint(x * y)    # ??\nprint(x + x)    # ??\nprint((y+z)**z) # ??\nprint(y/(y+z))  # ??\n\nprint( type(x * y) )    # ??\nprint( type(y * z) )    # ??\nprint( type((y+z)**z) ) # ??\nprint( type(y/(y+z)) )  # ??\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n22\n22\n16\n0.5\n<class 'str'>\n<class 'int'>\n<class 'int'>\n<class 'float'>\n```\n:::\n:::\n\n\n:::\n\n## Assignment\n\n**Before running the code**, work out what the values of `x`, `y` and `z` will be after every line of code in the block has been executed.\n\n::: {.qna}\n\n#### Question\n\n```python\nx = 12\ny = 10\n\nz = x + y # ??\nx = x + y # ??\ny = z + y # ??\n\n# print(x)\n# ??\n# ??\n```\n\n#### Answer\n\n::: {#4769412a .cell execution_count=4}\n``` {.python .cell-code}\nx = 12\ny = 10\n\nz = x + y\nx = x + y\ny = z + y\n\nprint(x)\nprint(y)\nprint(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n22\n32\n22\n```\n:::\n:::\n\n\n:::\n\nOnce you have worked out what you think `x`, `y` and `z` are, add `print(...)` statements to the code above to check your answers!\n\nMake sure you understand the results you find. **Ask someone if you need help to understand.**\n\n## Operators & Precedence\n\n**Before running the code**, work out what the values of `x`, `y` and `z` will be after every line of code in the block has been executed. Feel free to use a calculator.\n\n::: {.callout-tip}\n\n This question is about what operations (i.e. multiplication, division, powers, etc.) are done *first* based on the type of operation and the presence of parentheses... it's the same as it would be for a maths problem!\n \n:::\n\n::: {.qna}\n\n#### Question\n\n```python\nx = 1 + (2 * 3) / 4\ny = (1 + 2) * (3 / 4)\nz = 1 + 2 * (3 / 4)\n\nprint(x) # x is \nprint(y) # y is \nprint(z) # z is \n```\n\n#### Answer\n\n::: {#1aac62b5 .cell execution_count=5}\n``` {.python .cell-code}\nx = 1 + (2 * 3) / 4\ny = (1 + 2) * (3 / 4)\nz = 1 + 2 * (3 / 4)\n\nprint(x) # x is \nprint(y) # y is \nprint(z) # z is \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2.5\n2.25\n2.5\n```\n:::\n:::\n\n\n:::\n\nOnce you have calculated what you think `x`, `y` and `z` are, run the code to check.\n\n## Test Your Operator Knowledge\n\nNow let's look at some of the stranger operators. Many of these can be very useful in more complex code but can seem a little pointless now.\n\n**Work out what operator should replace the `??`** in each of the lines of code below to produce the output I've shown in the comments. I've mixed in ones you have seen above with ones that we've not seen before.\n\n::: {.qna}\n\n#### Question\n\n```python\nx = 10\ny = 3\n\nprint( x ?? y ) # 1\nprint( x ?? y ) # 13\nprint( x ?? y ) # False\nprint( x ?? y ) # 1000\nprint( x ?? y ) # 7\nprint( x ?? y ) # 3\n```\n\n#### Answer\n\n::: {#5775bdd2 .cell execution_count=6}\n``` {.python .cell-code}\nx = 10\ny = 3\n\nprint( x % y ) # 1\nprint( x + y ) # 13\nprint( x == y ) # False\nprint( x ** y ) # 1000\nprint( x - y ) # 7\nprint( x // y ) # 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n13\nFalse\n1000\n7\n3\n```\n:::\n:::\n\n\n:::\n\n## Applying What We've Learned\n\nNow we are going to take what we've learned and apply it in a more 'abstract' way: how do we translate some well-known mathematical formulae _into code_? In particular, I'm interested in the formula for the volume of a sphere (and this gives me a chance to show that Notebooks can show formulae as well!):\n\n$$\nV = \\frac{4}{3}\\pi r^{3}\n$$\n\n### Calculate the Volume of a Sphere\n\nSo, given a sphere with a **diameter** of 12cm, calculate its volume:\n\n::: {.callout-tip}\n\nI would strongly advise you to Google: `python constant pi` and look for code that will save you having to write down the value of $\\pi$.\n\n:::\n\n::: {.qna}\n\n#### Question\n\n```python\nfrom math import ??\nv = ??\nprint(f\"{v:0.3f} cm3\")\n```\n\n#### Answer\n\n::: {#d6fc6b08 .cell execution_count=7}\n``` {.python .cell-code}\nfrom math import pi\nv = (4/3) * pi * (12/2)**3\nprint(f\"{v:0.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n904.779\n```\n:::\n:::\n\n\n:::\n\nI get an answer of 904\\.779cm$^3$.\n\n### Calculate the Radius of a Sphere\n\nNow, given a sphere of volume 14,137cm$^3$ calculate its radius as a **whole number**. The formula for this can be worked out as:\n\n\\begin{align*}\n\\frac{3}{4}V &= \\pi r^{3} \\\\\n\\frac{3}{4}\\frac{V}{\\pi} &= r^{3} \\\\\n(\\frac{3}{4}\\frac{V}{\\pi})^{1/3} &= r\n\\end{align*}\n\nIf you can't remember how to rearrange formulae this would be a good skill to refresh! \n\n::: {.callout-tip}\n\nThere are three ways to get a \"whole number\" from a float:\n\n1. When you're starting out, the easiest is to change the variable's `type`\n2. The next step up is to make use of Google to find out if there are ways of *rounding* to the nearest integer\n3. The third step is to change what's visible to the user without altering the actual number\n\n:::\n\nI get an answer of either 14 or 15... can you work out why?\n\n::: {.qna}\n\n#### Question\n\n```python\nfrom math import pi\nv = 14137\nr = ??\nprint(??)\n```\n\n#### Answer\n\n::: {#e012861b .cell execution_count=8}\n``` {.python .cell-code}\nfrom math import pi\nv = 14137\nr = ((3 * v) / (4 * pi))**(1/3)\nprint(\"1. \" + str(int(r)) + \" cm\")\nprint(\"2. \" + str(round(r)) + \" cm\")\nprint(\"3. \" + f\"{r:0.0f} cm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1. 14 cm\n2. 15 cm\n3. 15 cm\n```\n:::\n:::\n\n\n:::\n\n# Python Conditions\n\n::: {.callout-note}\n### Connections\n\nThis is a short recap of material covered in Code Camp's [Truth & Conditions](https://jreades.github.io/code-camp/lessons/Boolean_Logic.html) and, to some extent, the [Iteration](https://jreades.github.io/fsds/sessions/week2.html#lectures) lecture.\n\n:::\n\n## Working with Conditions\n\nUse **if, elif, and else** so that you get the following output:\n\n1. When `hours` is 10 or more, then the code prints `At least 10 hours worked!`\n2. When `hours` is exactly 2, then the code prints `Exactly 2 hours worked.`  \n3. When `hours` is 9 or less *but not 2*, then the code prints `Less than 10 hours worked!`\n\n::: {.callout-tip}\n\n### Hint\n\n You will *also* need to think about the order in which these conditions are tested.\n \n:::\n\n::: {.qna}\n\n#### Question\n\n```python\nhours = 2\n\nif hours ??:\n    print(\" \")\nelif hours ??:\n    print(\" \")\nelse:\n    print(\" \")\n```\n\n#### Answer\n\n::: {#df6cd6fc .cell execution_count=9}\n``` {.python .cell-code}\nhours=2\n\nif hours == 2:\n    print(\"Exactly 2 hours worked\")\nelif hours < 10:\n    print(\"Less than 10 hours worked!\")\nelse:\n    print(\"At least 10 hours worked!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nExactly 2 hours worked\n```\n:::\n:::\n\n\n:::\n\n## Flow Control\n\nUsing the flow chart shown in the image below as a model, write the code to make this condition work. You will need to complete the code such that it produces the following:\n1. When `a = 2` and `b = 2` four lines of output will be written\n2. When `a = 1` and `b = 2` one line of output will be written\n\n![](https://kingsgeocomputation.files.wordpress.com/2016/09/geocompweek2_task3_3.jpg){width=600}\n\n::: {.qna}\n\n#### Question\n\n```python\na = 1\nb = 1\n\n# <your code here>\n??\n```\n\n#### Answer\n\n::: {#e49e4acb .cell execution_count=10}\n``` {.python .cell-code}\na = 1\nb = 1\n\nx = a\n\nif x == b:\n    print(\"inside 1\")\n    print(\"inside 2\")\n    print(\"inside\")\n\nprint(\"after condition\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninside 1\ninside 2\ninside\nafter condition\n```\n:::\n:::\n\n\n:::\n\n# Python Logic\n\n::: {.callout-note}\n\n### Connections\n\n This is a short recap of Code Camp's [Boolean Logic](https://jreades.github.io/code-camp/lessons/Boolean_Logic.html) session and the [Pthon: the Basics](https://jreades.github.io/fsds/sessions/week2.html#lectures) lecture.\n \n:::\n\n## It's All Quite Logical...\n\nBefore adding a value for `x` and running the code below, try to answer the following questions:\n\n::: {.qna}\n\n#### Question\n\n1. What names are name(s) are printed when `x = 5`? \n2. What value(s) can `x` be when the names `Joe` and `Aled` are printed? \n3. What name(s) are printed when `x = -1`?  \n4. Is there any value for which all three names will be printed? \n\n```python\nx = ??\n\nif x > 0 and x < 5:\n    print(\"Joe\")\n\nif x > 0 or x < 5:\n    print(\"Aled\")\n\nif not(x > 0):\n    print(\"Sarah\")\n```\n\n#### Answer\n\n1. What names are name(s) are printed when `x = 5`? **Answer**: `Aled`\n2. What value(s) can `x` be when the names `Joe` and `Aled` are printed? **Answer**: $x \\in [1,4]$\n3. What name(s) are printed when `x = -1`?  **Answer**: `Aled` and `Sarah`\n4. Is there any value for which all three names will be printed? `No`\n\n::: {#8b379ede .cell execution_count=11}\n``` {.python .cell-code}\nx = 0\n\nif x > 0 and x < 5:\n    print(\"Joe\")\n\nif x > 0 or x < 5:\n    print(\"Aled\")\n\nif not(x > 0):\n    print(\"Sarah\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAled\nSarah\n```\n:::\n:::\n\n\n:::\n\n## Logic (Cont'd)\n\nStudy the flow chart below.\n\n![](https://kingsgeocomputation.files.wordpress.com/2016/09/geocompweek2_task3_5.jpg){width=600}\n\n::: {.callout-tip}\n\nThis will require you to combine logic with one of the operators that we saw earlier. Also note the *new* iterator that we've got here: `range(<start>, <stop>)` to create a `range` of numbers between two other numbers.\n \n:::\n\nIn the cell below, use the for loop _already set up_ to as a starting point for implementing the flow chart shown above for values of `x` between 0 and 9.\n\n::: {.qna}\n\n#### Question\n\n```python\nfor x in range(0,9):\n    #... do something...\n    ??\n```\n\n#### Answer\n\n::: {#89650620 .cell execution_count=12}\n``` {.python .cell-code}\nfor x in range(0,9):\n    #... do something...\n    if x%2==0:\n        print(\"x is even.\")\n    else:\n        print(\"x is odd\")\n    print(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is even.\n0\nx is odd\n1\nx is even.\n2\nx is odd\n3\nx is even.\n4\nx is odd\n5\nx is even.\n6\nx is odd\n7\nx is even.\n8\n```\n:::\n:::\n\n\n:::\n\n## 'Nested' Conditionals\n\nConditional statements can be nested within one another. That is, Python evaluates the first, or 'outer', condition and can then evaluate secondary, or 'inner', conditions. The code below shows an example of this. \n\n::: {.qna}\n\n#### Question\n\n```python\nx = 5\ny = 4\n\nif x != y:                                 #line 1\n    print(\"x is not equal to y\")\n    \n    if(x > y):                             #line 4\n        print(\"x is greater than y\")\n    \n    else:                                  #line 7\n        print(\"x is less than y\")\n\nelse:\n    print(\"<insert conclusion here>\")\n```\n\n#### Answer\n\n::: {#d6d11bc9 .cell execution_count=13}\n``` {.python .cell-code}\nx = 2\ny = 3\n\nif x != y:                                 #line 1\n    print(\"x is not equal to y\")\n\n    if(x > y):                             #line 4\n        print(\"x is greater than y\")\n\n    else:                                  #line 7\n        print(\"x is less than y\")\n\nelse:\n    print(\"x is equal to y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is not equal to y\nx is less than y\n```\n:::\n:::\n\n\n:::\n\nNote how the indentation makes it easier to work out which ‘level’ (outer or inner condition) the code is operating on. In the code above, lines 4 and 7 are at the same indentation meaning that _both will be skipped_ if the initial condition (on line 1) is `False`. \n\nTo check you understand how the code above works:\n\n1. Change `<insert conclusion here>` to a string that explains the condition of `x` and `y`\n2. For `x = 2` and `y = 3`, type what line(s) will be output here: ...\n\nGreat! You should now have a pretty good understanding of how conditional and logical operators work. This understanding will be handy in future as we work through other computational concepts.\n\n# Python Lists\n\n::: {.callout-note}\n\n### Connections\n\n This is a short recap of material covered in the [Lists](https://jreades.github.io/fsds/sessions/week2.html#lectures) lecture and Code Camp's [Lists](https://jreades.github.io/code-camp/lessons/Lists.html) session.\n \n:::\n\n## Who's in the List?\n\nHere we are looking to interact with lists in a straightforward way that will help you to understand accessing them using indexes and slices, and searching.\n\n::: {.qna}\n\n#### Question\n\n```python\ncities = ['New York', 'London', 'Beijing', 'Tokyo', 'Delhi']\n\n# Print out London from cities:\nprint( ?? )\n\n# Print out Tokyo using *negative* indexing:\nprint( ?? )\n\n# Print out Beijing *and* Tokyo using a list slice\nprint( ?? )\n\n# Print out London to Delhi using a slice\nprint( ?? ) # You could also do cities[1:5] but this way is neater\n\n# Combine positive and negative indexing to print out London, Beijing and Tokyo using a list slice\nprint( ?? )\n\n# Print out the position of New York in the list by searching for it (i.e. you can't just type 0)\nprint( ?? )\n```\n\n#### Answer\n\n::: {#d7397338 .cell execution_count=14}\n``` {.python .cell-code}\ncities = ['New York', 'London', 'Beijing', 'Tokyo', 'Delhi']\n\n# Print out London from cities:\nprint( cities[1] )\n\n# Print out Tokyo using *negative* indexing:\nprint( cities[-2] )\n\n# Print out Beijing and Tokyo using a list slice\nprint( cities[2:4] )\n\n# Print out London to Delhi using a slice\nprint( cities[1:] ) # You could also do cities[1:5] but this way is neater\n\n# Combine positive and negative indexing to print out London, Beijing and Tokyo using a list slice\nprint( cities[1:-1] )\n\n# Print out the position of New York in the list by searching for it (i.e. you can't just type 0)\nprint( cities.index('New York') )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLondon\nTokyo\n['Beijing', 'Tokyo']\n['London', 'Beijing', 'Tokyo', 'Delhi']\n['London', 'Beijing', 'Tokyo']\n0\n```\n:::\n:::\n\n\n:::\n\n## Manipulating Lists\n\nLet's break a few things...\n\n### Create an IndexError\n\n::: {.qna}\n\n#### Question\n\n```python\n# Cause an 'IndexError: list index out of range' errr\n??\n```\n\n#### Answer\n\n```{{python}}\ncities[7]\n```\n\n:::\n\n### Create a ValueError\n\n::: {.qna}\n\n#### Question\n\n```python\n# Cause a ValueError using the city of Toronto\n??\n```\n\n#### Answer\n\n```{{python}}\ncities.index('Toronto')\n```\n\n:::\n\n### Sort the List\n\nSort the list *in place* in reverse alphabetical order (i.e. z...a) and then print the sorted list\n\n::: {.qna}\n\n#### Question\n\n```python\n??\nprint(cities)\n```\n\nThe output from this should be: <code>['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']</code>\n\n#### Answer\n\n::: {#bc3228d9 .cell execution_count=15}\n``` {.python .cell-code}\n# The approach does _not_ sort the original list,\n# it returns a copy of the list that is sorted:\nprint(sorted(cities, reverse=True)) # <- what is printed is sorted\nprint(cities)                       # <- but the list is not\n\n# This is the 'in place' option\ncities.sort(reverse=True)           # <- list is now sorted\nprint(cities)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']\n['New York', 'London', 'Beijing', 'Tokyo', 'Delhi']\n['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']\n```\n:::\n:::\n\n\n:::\n\n## Adding/Removing Values\n\n### Inserting into a List\n\nAdd the city of Toronto to the list _after_ New York in the *sorted* list.\n\n::: {.qna}\n\n#### Question\n\n```python\n# Just in case you make a mistake...\ncities = ['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']\n\n??\nprint(cities)\n```\n\n#### Answer\n\n::: {#913dd858 .cell execution_count=16}\n``` {.python .cell-code}\n# Just in case you make a mistake...\ncities = ['Tokyo', 'New York', 'London', 'Delhi', 'Beijing']\n\ncities.insert(2,'Toronto')\nprint(cities)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Tokyo', 'New York', 'Toronto', 'London', 'Delhi', 'Beijing']\n```\n:::\n:::\n\n\n:::\n\nThe output should be: <code>['Tokyo', 'New York', 'Toronto', 'London', 'Delhi', 'Beijing']</code>\n\n### Removing from a List\n\nNow *pop* New York from the list *without* specifying its index (i.e. the number `1` should *not* appear in your code). Print out the value that you popped and the print out the cities list to check you've done the right thing...\n\n::: {.qna}\n\n#### Question\n\n```python\n??\nprint(p)\nprint(cities)\n```\n\n#### Answer\n\n::: {#8c7cdcae .cell execution_count=17}\n``` {.python .cell-code}\np = cities.pop( cities.index('New York') )\nprint(p)\nprint(cities)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNew York\n['Tokyo', 'Toronto', 'London', 'Delhi', 'Beijing']\n```\n:::\n:::\n\n\n:::\n\nThe output should be: \n\n- <code>New York</code>\n- <code>['Tokyo', 'Toronto', 'London', 'Delhi', 'Beijing']</code>\n\n### Checking Lists\n\nFinally, how can you check if the city of Moscow is in the list and let the user know if it is or is not?\n\n::: {.qna}\n\n#### Question\n\n```python\nif ??\n    ??\nelse:\n    ??\n```\n\n#### Answer\n\n::: {#1f29947c .cell execution_count=18}\n``` {.python .cell-code}\nif 'Moscow' in cities:\n    print(\"Moscow is in the cities list.\")\nelse:\n    print(\"Moscow is not in the cities list.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMoscow is not in the cities list.\n```\n:::\n:::\n\n\n:::\n\n## You're Done!\n\nThis is quite a lot to get through. If you've managed it in under 2 hours then *congratulations*! Either you must have paid a lot of attention when doing Code Camp, or you might want to check in with us as to whether you should really be doing this module...\n\n### No Wait, One More Thing...\n\nYou might want to refer to both [The Command Line](https://jreades.github.io/fsds/sessions/week2.html#lectures) and [Getting Stuck into Git](https://jreades.github.io/fsds/sessions/week2.html#lectures) lectures as well as to [The Terminal](https://jreades.github.io/code-camp/lessons/The_Terminal.html) Code Camp session.\n\nYou now want to push your completed notebook to your GitHub reposistory. Using the Terminal or Git Bash you need to:\n\n1. Navigate (if you've not got a shell already open there) to `$HOME/Documents/CASA/modules/<your repository>`.\n2. Check the status of your notebooks using `git status` (you should see that `Practical-02-Foundations_1.ipynb has been modified`).\n3. Add this changed notebook to git using `git add  Practical-02-Foundations_1.ipynb`\n4. Commit this changed notebook with a message using `git commit -m \"<your message here... but don't use a !>\"`\n5. Push this change to GitHub using: `git push`\n\nYou should now be able to visit your repository on [GitHub](https://github.com/) and see that your changes are now stored there as well!\n\n::: {.callout-note}\n \n If you are using Docker then you can also save your work as a PDF using: `File` > `Export Notebook As...` (this does not work for notebooks with lots of complex formatting).\n \n:::\n\n#### License\nThese teaching materials are licensed under a mix of the MIT and CC-BY licenses...\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /Users/jreades/anaconda3/envs/sds/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.2\n---\n",
    "supporting": [
      "Practical-02-Foundations_1_files/figure-ipynb"
    ],
    "filters": []
  }
}
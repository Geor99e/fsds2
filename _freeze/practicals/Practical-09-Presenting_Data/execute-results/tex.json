{
  "hash": "3b868d359af679dd6f6cccf80a77e349",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Practical 9: Presenting Data\"\nsubtitle: \"Visualisation and Tables\"\njupyter: python3\nfilters:\n  - qna\n  - quarto\n---\n\n\n\n\n| Complete | Part 1: Foundations | Part 2: Data | Part 3: Analysis |     |\n| :------- | :------------------ | :----------- | :--------------- | --: |\n| 90% | &#9619;&#9619;&#9619;&#9619;&#9619;&#9619;&#9619;&#9619; | &#9619;&#9619;&#9619;&#9619;&#9619;&#9619; | &#9619;&#9619;&#9619;&#9619;&#9619;&#9617; | 9/10\n\n::: {.callout-warning}\n\n#### Important\n\nThis practical focusses on the final topic we want to cover in *Foundations*: visualisation! You will have seen quite a bit of this across the preceding three to four weeks, but it was done in an _ad-hoc_ way, here we try to systematise things a bit.\n\n:::\n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nHere we're trying to tidy up the loose ends. You've already worked with basic data visualisations in Seaborn and Matplotlib (including (geo)panda's `plot` function), but we want you to have a better sense of how that _works_ as part of a coherent -- if altogether rather complex and overwhelming -- approach to managing a data visualisation.\n\n:::\n\n# Preamble\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport seaborn as sns\n\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport os\nfrom requests import get\nfrom urllib.parse import urlparse\n\ndef cache_data(src:str, dest:str) -> str:\n    \"\"\"Downloads and caches a remote file locally.\n    \n    The function sits between the 'read' step of a pandas or geopandas\n    data frame and downloading the file from a remote location. The idea\n    is that it will save it locally so that you don't need to remember to\n    do so yourself. Subsequent re-reads of the file will return instantly\n    rather than downloading the entire file for a second or n-th itme.\n    \n    Parameters\n    ----------\n    src : str\n        The remote *source* for the file, any valid URL should work.\n    dest : str\n        The *destination* location to save the downloaded file.\n        \n    Returns\n    -------\n    str\n        A string representing the local location of the file.\n    \"\"\"\n    \n    url = urlparse(src) # We assume that this is some kind of valid URL \n    fn  = os.path.split(url.path)[-1] # Extract the filename\n    dfn = os.path.join(dest,fn) #Â Destination filename\n    \n    # Check if dest+filename does *not* exist -- \n    # that would mean we have to download it!\n    if not os.path.isfile(dfn) or os.path.getsize(dfn) < 1:\n        \n        print(f\"{dfn} not found, downloading!\")\n\n        # Convert the path back into a list (without)\n        # the filename -- we need to check that directories\n        # exist first.\n        path = os.path.split(dest)\n        \n        # Create any missing directories in dest(ination) path\n        # -- os.path.join is the reverse of split (as you saw above)\n        # but it doesn't work with lists... so I had to google how\n        # to use the 'splat' operator! os.makedirs creates missing\n        # directories in a path automatically.\n        if len(path) >= 1 and path[0] != '':\n            os.makedirs(os.path.join(*path), exist_ok=True)\n            \n        # Download and write the file\n        with open(dfn, \"wb\") as file:\n            response = get(src)\n            file.write(response.content)\n            \n        print('Done downloading...')\n\n    else:\n        print(f\"Found {dfn} locally!\")\n\n    return dfn\n```\n:::\n\n\n# Using Maplotlib\n\n## Anatomy of a Figure\n\n::: {.callout-tip}\n\nYou might want to bookmark the 'Anatomy of a Figure' image so that you can easily find and refer to it in the future. This structure is why `matplotlib` is so much nastier than `ggplot`, but it does also give you greater _control_ over the output if you really dig into the guts of things.\n\n:::\n\n*One* of the reasons that Matplotlib is so much more complex than `ggplot` is that it can actually *do* a plot more than ggplot, including image manipulation, axis translation, and even 3D. You can get a sense of this by looking at [the tutorials](https://matplotlib.org/stable/tutorials/index.html) since the [Users guide](https://matplotlib.org/stable/users/index.html) can be a bit overwhelming.\n\nNevertheless, the [core components of all matplotlib figures](https://matplotlib.org/stable/gallery/showcase/anatomy.html) can be seen here:\n\n<img src=\"https://matplotlib.org/stable/_images/sphx_glr_anatomy_001.png\" alt=\"Anatomy of a Figure\" style=\"width:50%\" />\n\n## Finding Fonts\n\nI find matplotlib's use of fonts to be _profoundly_ weird. If you use `conda` and install directly on to the computer then you _might_ have access to all of your computer's fonts (though there are different *types* of fonts as well, not all of which will show up), but for most users it will be those that were installed into Docker. \n\n### Using Fontconfig\n\n`fontconfig` is the base Linux utility for managing fonts. We can list font using `fc-list` and then a set of 'switches' determining the kind of information we want back. Since fontconfig doesn't exist on OSX or Windows, you'll need to do some more investigating and poking around to get these details on a `conda` install (I'll show an option further down)...\n\nHere we ask fontconfig to format the output so that we only get the first part of the family name, and then we pipe (recall `|` sends output from one utility to another!) the output of that to `sort`, which sorts the output, and `uniq` which removes duplicates (which there will be because there are **bold**, *italic*, small-caps, etc. versions of each font). To make better sense of this you can always try playing around with all three steps in the output below!\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfonts = ! fc-list --format=\"%{family[0]}\\n\" | sort | uniq\nprint(fonts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['.Al Bayan PUA', '.Al Nile PUA', '.Al Tarikh PUA', '.Apple Color Emoji UI', '.Apple SD Gothic NeoI', '.Aqua Kana', '.Arial Hebrew Desk Interface', '.Baghdad PUA', '.Beirut PUA', '.Damascus PUA', '.DecoType Naskh PUA', '.Diwan Kufi PUA', '.Farah PUA', '.Geeza Pro Interface', '.Geeza Pro PUA', '.Helvetica LT MM', '.Hiragino Kaku Gothic Interface', '.Hiragino Sans GB Interface', '.Keyboard', '.KufiStandardGK PUA', '.LastResort', '.Lucida Grande UI', '.Muna PUA', '.Nadeem PUA', '.New York', '.Noto Nastaliq Urdu UI', '.PingFang HK', '.PingFang SC', '.PingFang TC', '.SF Arabic', '.SF Arabic Rounded', '.SF Armenian', '.SF Armenian Rounded', '.SF Camera', '.SF Compact', '.SF Compact Rounded', '.SF Georgian', '.SF Georgian Rounded', '.SF Hebrew', '.SF Hebrew Rounded', '.SF NS Mono', '.SF NS Rounded', '.SF Soft Numeric', '.Sana PUA', '.Savoye LET CC.', '.ThonburiUI', '.ThonburiUIWatch', '.Times LT MM', 'Academy Engraved LET', 'Adobe Garamond', 'Adobe Jenson MM', 'Adobe Wood Type', 'AdobeGaramond', 'Al Bayan', 'American Typewriter', 'Amethyst', 'Andale Mono', 'Antonio', 'Apple Braille', 'Apple Chancery', 'Apple Color Emoji', 'Apple SD Gothic Neo', 'Apple Symbols', 'AppleGothic', 'AppleMyungjo', 'Arial', 'Arial Black', 'Arial Hebrew', 'Arial Hebrew Scholar', 'Arial Narrow', 'Arial Rounded MT Bold', 'Arial Unicode MS', 'Athelas', 'Avenir', 'Avenir Next', 'Avenir Next Condensed', 'Ayuthaya', 'Bangla MN', 'Bangla Sangam MN', 'Barlow', 'Baskerville', 'Bergamo Caps', 'Bergamo Pro', 'Bergamo Std', 'Big Caslon', 'Big Shoulders Display', 'BigCheeseLight', 'Blockhead', 'Bodoni 72', 'Bodoni 72 Oldstyle', 'Bodoni 72 Smallcaps', 'Bodoni Ornaments', 'Bradley Hand', 'Brush Script MT', 'Chalkboard', 'Chalkboard SE', 'Chalkduster', 'Charter', 'CitizenLight', 'Cochin', 'Comic Sans MS', 'Copperplate', 'Corsiva Hebrew', 'Courier', 'Courier New', 'DIN Alternate', 'DIN Condensed', 'Damascus', 'DemocraticaRegular', 'Devanagari MT', 'Devanagari Sangam MN', 'Didot', 'EB Garamond', 'ESRI Default Marker', 'ESRI Public1', 'ESRI Transportation & Civic', 'ESRI US MUTCD 1', 'ESRI US MUTCD 2', 'ESRI US MUTCD 3', 'Euphemia UCAS', 'Fira Code', 'Fira Mono', 'Fira Sans', 'Fira Sans Condensed', 'Fira Sans Extra Condensed', 'Frutiger', 'Futura', 'GB18030 Bitmap', 'Gallagher', 'Galvji', 'Gasolyn Free', 'Geeza Pro', 'Geneva', 'Georgia', 'Gill Sans', 'Grantha Sangam MN', 'Gujarati MT', 'Gujarati Sangam MN', 'Gurmukhi MN', 'Gurmukhi MT', 'Gurmukhi Sangam MN', 'Heiti SC', 'Heiti TC', 'Helvetica', 'Helvetica Neue', 'Herculanum', 'Hiragino Kaku Gothic Pro', 'Hiragino Kaku Gothic ProN', 'Hiragino Kaku Gothic Std', 'Hiragino Kaku Gothic StdN', 'Hiragino Maru Gothic Pro', 'Hiragino Maru Gothic ProN', 'Hiragino Mincho Pro', 'Hiragino Mincho ProN', 'Hiragino Sans', 'Hiragino Sans GB', 'Hoefler Text', 'ITF Devanagari', 'ITF Devanagari Marathi', 'Impact', 'InaiMathi', 'Inconsolata', 'Inconsolata Condensed', 'Inconsolata Expanded', 'Inconsolata ExtraCondensed', 'Inconsolata ExtraExpanded', 'Inconsolata SemiCondensed', 'Inconsolata SemiExpanded', 'Inconsolata UltraCondensed', 'Inconsolata UltraExpanded', 'Input Mono', 'Input Mono Compressed', 'Input Mono Condensed', 'Input Mono Narrow', 'Input Sans', 'Input Sans Compressed', 'Input Sans Condensed', 'Input Sans Narrow', 'Input Serif', 'Input Serif Compressed', 'Input Serif Condensed', 'Input Serif Narrow', 'Inter Tight', 'Iowan Old Style', 'JetBrains Mono', 'Johnston ITC Std', 'Kailasa', 'Kannada MN', 'Kannada Sangam MN', 'Kefa', 'Khmer MN', 'Khmer Sangam MN', 'Khula', 'Kings Caslon Display', 'Kings Caslon Text', 'KingsBureauGrot', 'Klavika', 'Kohinoor Bangla', 'Kohinoor Devanagari', 'Kohinoor Gujarati', 'Kohinoor Telugu', 'Kokonor', 'Krungthep', 'Kubos', 'KufiStandardGK', 'Lao MN', 'Lao Sangam MN', 'Liberation Mono', 'Liberation Sans', 'Liberation Sans Narrow', 'Liberation Serif', 'Linotype Holiday Pi', 'Lobster', 'Lucida Grande', 'Luminari', 'Malayalam MN', 'Malayalam Sangam MN', 'Marion', 'Marker Felt', 'Menlo', 'Micro 5', 'Microsoft Sans Serif', 'Miguta', 'Monaco', 'Mshtakan', 'Mukta Mahee', 'Myanmar MN', 'Myanmar Sangam MN', 'Nadeem', 'New Peninim MT', 'Noble Company', 'Norse', 'Noteworthy', 'Noto Nastaliq Urdu', 'Noto Sans Adlam', 'Noto Sans Armenian', 'Noto Sans Avestan', 'Noto Sans Bamum', 'Noto Sans Bassa Vah', 'Noto Sans Batak', 'Noto Sans Bhaiksuki', 'Noto Sans Brahmi', 'Noto Sans Buginese', 'Noto Sans Buhid', 'Noto Sans Canadian Aboriginal', 'Noto Sans Carian', 'Noto Sans Caucasian Albanian', 'Noto Sans Chakma', 'Noto Sans Cham', 'Noto Sans Coptic', 'Noto Sans Cuneiform', 'Noto Sans Cypriot', 'Noto Sans Duployan', 'Noto Sans Egyptian Hieroglyphs', 'Noto Sans Elbasan', 'Noto Sans Glagolitic', 'Noto Sans Gothic', 'Noto Sans Gunjala Gondi', 'Noto Sans Hanifi Rohingya', 'Noto Sans Hanunoo', 'Noto Sans Hatran', 'Noto Sans Imperial Aramaic', 'Noto Sans Inscriptional Pahlavi', 'Noto Sans Inscriptional Parthian', 'Noto Sans Javanese', 'Noto Sans Kaithi', 'Noto Sans Kannada', 'Noto Sans Kayah Li', 'Noto Sans Kharoshthi', 'Noto Sans Khojki', 'Noto Sans Khudawadi', 'Noto Sans Lepcha', 'Noto Sans Limbu', 'Noto Sans Linear A', 'Noto Sans Linear B', 'Noto Sans Lisu', 'Noto Sans Lycian', 'Noto Sans Lydian', 'Noto Sans Mahajani', 'Noto Sans Mandaic', 'Noto Sans Manichaean', 'Noto Sans Marchen', 'Noto Sans Masaram Gondi', 'Noto Sans Meetei Mayek', 'Noto Sans Mende Kikakui', 'Noto Sans Meroitic', 'Noto Sans Miao', 'Noto Sans Modi', 'Noto Sans Mongolian', 'Noto Sans Mro', 'Noto Sans Multani', 'Noto Sans Myanmar', 'Noto Sans NKo', 'Noto Sans Nabataean', 'Noto Sans New Tai Lue', 'Noto Sans Newa', 'Noto Sans Ol Chiki', 'Noto Sans Old Hungarian', 'Noto Sans Old Italic', 'Noto Sans Old North Arabian', 'Noto Sans Old Permic', 'Noto Sans Old Persian', 'Noto Sans Old South Arabian', 'Noto Sans Old Turkic', 'Noto Sans Oriya', 'Noto Sans Osage', 'Noto Sans Osmanya', 'Noto Sans Pahawh Hmong', 'Noto Sans Palmyrene', 'Noto Sans Pau Cin Hau', 'Noto Sans PhagsPa', 'Noto Sans Phoenician', 'Noto Sans Psalter Pahlavi', 'Noto Sans Rejang', 'Noto Sans Samaritan', 'Noto Sans Saurashtra', 'Noto Sans Sharada', 'Noto Sans Siddham', 'Noto Sans Sora Sompeng', 'Noto Sans Sundanese', 'Noto Sans Syloti Nagri', 'Noto Sans Syriac', 'Noto Sans Tagalog', 'Noto Sans Tagbanwa', 'Noto Sans Tai Le', 'Noto Sans Tai Tham', 'Noto Sans Tai Viet', 'Noto Sans Takri', 'Noto Sans Thaana', 'Noto Sans Tifinagh', 'Noto Sans Tirhuta', 'Noto Sans Ugaritic', 'Noto Sans Vai', 'Noto Sans Wancho', 'Noto Sans Warang Citi', 'Noto Sans Yi', 'Noto Sans Zawgyi', 'Noto Serif Ahom', 'Noto Serif Balinese', 'Noto Serif Hmong Nyiakeng', 'Noto Serif Myanmar', 'Noto Serif Yezidi', 'OS OpenMap Local', 'Olympicons', 'Olympicons 2', 'Optima', 'Oriya MN', 'Oriya Sangam MN', 'PT Mono', 'PT Sans', 'PT Sans Caption', 'PT Sans Narrow', 'PT Serif', 'PT Serif Caption', 'Palatino', 'Papyrus', 'Party LET', 'Phosphate', 'PingFang HK', 'PingFang SC', 'PingFang TC', 'Plantagenet Cherokee', 'RODE Noto Sans CJK SC B', 'RODE Noto Sans CJK SC R', 'RODE Noto Sans Hindi B', 'RODE Noto Sans Hindi R', 'Raanana', 'Roboto Flex', 'Roboto Mono', 'Roboto Serif', 'Roboto Slab', 'Rockwell', 'Rolves Free', 'STIX Two Math', 'STIX Two Text', 'STIXGeneral', 'STIXIntegralsD', 'STIXIntegralsSm', 'STIXIntegralsUp', 'STIXIntegralsUpD', 'STIXIntegralsUpSm', 'STIXNonUnicode', 'STIXSizeFiveSym', 'STIXSizeFourSym', 'STIXSizeOneSym', 'STIXSizeThreeSym', 'STIXSizeTwoSym', 'STIXVariants', 'STSong', 'Sathu', 'Satisfy', 'Savoye LET', 'Sedan', 'Sedan SC', 'Seravek', 'Shree Devanagari 714', 'SignPainter', 'Silkscreen', 'Silom', 'Sinhala MN', 'Sinhala Sangam MN', 'Skia', 'Snell Roundhand', 'Songti SC', 'Songti TC', 'Source Code Pro', 'Source Sans 3', 'Source Serif 4', 'Source Serif Pro', 'SourceCodePro+Powerline+Awesome Regular', 'Spectral', 'Star Jedi', 'Star Jedi Hollow', 'Sukhumvit Set', 'Superclarendon', 'Symbol', 'System Font', 'SystÃ©movÃ© pÃ­smo', 'Systemskrift', 'Tahoma', 'Tamil MN', 'Tamil Sangam MN', 'Telugu MN', 'Telugu Sangam MN', 'Thonburi', 'Times', 'Times New Roman', 'Tipus de lletra del sistema', 'Trattatello', 'Trebuchet MS', 'Unica One', 'Verdana', 'Webdings', 'Wingdings', 'Wingdings 2', 'Wingdings 3', 'Zapf Dingbats', 'Zapfino', 'Zebrawood', 'ZeitGuys', 'bridamount', 'ÙØ±Ø­', 'ÙÙÙ', 'ÙØ³Ø®', 'ÙØ³ÙÙ', 'ç³»çµ±å­é«', 'Ø§ÙÙÙÙ', 'Ø¨ØºØ¯Ø§Ø¯', 'Ø¨ÙØ±ÙØª', 'ØµÙØ¹Ø§Ø¡', 'ÙØ§Ø±Ø³Ù', 'Ø¯ÙÙØ§Ù Ø«ÙØ«', 'Ø¯ÙÙØ§Ù ÙÙÙÙ', 'ÙÙØµØ­ÙÙ', 'ÙÙØµØ­ÙÙ Ø°ÙØ¨Ù', 'Ø§ÙØªØ§Ø±ÙØ®']\n```\n:::\n:::\n\n\n::: {.callout-tip}\n#### Capturing output\n\nNotice that we're able to capture the output of an external application (called via the Terminal) with `fonts = ! ...`. This can be useful when something is easy to do on the command line but hard to do in Python.\n\n:::\n\nThe below option also pipes output from fonctconfig, but to the `grep` utility which checks each line for the character sequence `Liberation`. Now we're asking fontconfig to include `style` details which will relate to both weight (regular, bold, extra bold, light, etc.) and italic, bold, small caps, etc.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfonts = ! fc-list : family style | grep \"Liberation\"\nprint(sorted(fonts))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Liberation Mono:style=Bold', 'Liberation Mono:style=Bold Italic', 'Liberation Mono:style=Italic', 'Liberation Mono:style=Regular', 'Liberation Sans Narrow:style=Bold', 'Liberation Sans Narrow:style=Bold Italic', 'Liberation Sans Narrow:style=Italic', 'Liberation Sans Narrow:style=Regular', 'Liberation Sans:style=Bold', 'Liberation Sans:style=Bold Italic', 'Liberation Sans:style=Italic', 'Liberation Sans:style=Regular', 'Liberation Serif:style=Bold', 'Liberation Serif:style=Bold Italic', 'Liberation Serif:style=Italic', 'Liberation Serif:style=Regular']\n```\n:::\n:::\n\n\nYou can find more examples [here](https://www.geeksforgeeks.org/fc-list-command-in-linux-with-examples/), a more detailed set of instructions [here](https://www.freedesktop.org/software/fontconfig/fontconfig-user.html), and even information about (for example) [supported languages](https://thottingal.in/blog/2016/03/04/fontconfig-language-matching/) based on [RFC 3066](http://www.i18nguy.com/unicode/language-identifiers.html).\n\nHere are the languages supported by the Ubuntu Light font:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n! fc-list \"Liberation Mono\" : lang\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n:lang=aa|af|av|ay|be|bg|bi|br|bs|ca|ce|ch|co|cs|cy|da|de|el|en|eo|es|et|eu|fi|fj|fo|fr|fur|fy|gd|gl|gv|ho|hr|hu|ia|id|ie|ik|io|is|it|ki|kl|kum|la|lb|lez|lt|lv|mg|mh|mo|mt|nb|nds|nl|nn|no|nr|nso|ny|oc|om|os|pl|pt|rm|ro|ru|se|sel|sk|sl|sma|smj|smn|so|sq|sr|ss|st|sv|sw|tk|tl|tn|tr|ts|uk|uz|vo|vot|wa|wen|wo|xh|yap|zu|an|crh|csb|fil|hsb|ht|jv|kj|ku-tr|kwm|lg|li|ms|na|ng|pap-an|pap-aw|rn|rw|sc|sg|sn|su|za\r\n```\n:::\n:::\n\n\nHere are the monospace fonts installed: \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n! fc-list :spacing=mono : family | sort | uniq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.Apple Color Emoji UI\r\n.LastResort\r\n.SF NS Mono\r\n.Times LT MM\r\nAdobe Garamond\r\nAdobe Jenson MM\r\nAdobe Wood Type\r\nAmethyst\r\nAndale Mono\r\nApple Color Emoji\r\nCourier New\r\nFira Mono\r\nFira Mono,Fira Mono Medium\r\nGB18030 Bitmap\r\nInconsolata\r\nInconsolata Condensed\r\nInconsolata Condensed,Inconsolata Condensed Black\r\nInconsolata Condensed,Inconsolata Condensed ExtraBold\r\nInconsolata Condensed,Inconsolata Condensed ExtraLight\r\nInconsolata Condensed,Inconsolata Condensed Light\r\nInconsolata Condensed,Inconsolata Condensed Medium\r\nInconsolata Condensed,Inconsolata Condensed SemiBold\r\nInconsolata Expanded\r\nInconsolata Expanded,Inconsolata Expanded Black\r\nInconsolata Expanded,Inconsolata Expanded ExtraBold\r\nInconsolata Expanded,Inconsolata Expanded ExtraLight\r\nInconsolata Expanded,Inconsolata Expanded Light\r\nInconsolata Expanded,Inconsolata Expanded Medium\r\nInconsolata Expanded,Inconsolata Expanded SemiBold\r\nInconsolata ExtraCondensed\r\nInconsolata ExtraCondensed,Inconsolata ExtraCondensed Black\r\nInconsolata ExtraCondensed,Inconsolata ExtraCondensed ExtraBold\r\nInconsolata ExtraCondensed,Inconsolata ExtraCondensed ExtraLight\r\nInconsolata ExtraCondensed,Inconsolata ExtraCondensed Light\r\nInconsolata ExtraCondensed,Inconsolata ExtraCondensed Medium\r\nInconsolata ExtraCondensed,Inconsolata ExtraCondensed SemiBold\r\nInconsolata ExtraExpanded\r\nInconsolata ExtraExpanded,Inconsolata ExtraExpanded Black\r\nInconsolata ExtraExpanded,Inconsolata ExtraExpanded ExtraBold\r\nInconsolata ExtraExpanded,Inconsolata ExtraExpanded ExtraLight\r\nInconsolata ExtraExpanded,Inconsolata ExtraExpanded Light\r\nInconsolata ExtraExpanded,Inconsolata ExtraExpanded Medium\r\nInconsolata ExtraExpanded,Inconsolata ExtraExpanded SemiBold\r\nInconsolata SemiCondensed\r\nInconsolata SemiCondensed,Inconsolata SemiCondensed Black\r\nInconsolata SemiCondensed,Inconsolata SemiCondensed ExtraBold\r\nInconsolata SemiCondensed,Inconsolata SemiCondensed ExtraLight\r\nInconsolata SemiCondensed,Inconsolata SemiCondensed Light\r\nInconsolata SemiCondensed,Inconsolata SemiCondensed Medium\r\nInconsolata SemiCondensed,Inconsolata SemiCondensed SemiBold\r\nInconsolata SemiExpanded\r\nInconsolata SemiExpanded,Inconsolata SemiExpanded Black\r\nInconsolata SemiExpanded,Inconsolata SemiExpanded ExtraBold\r\nInconsolata SemiExpanded,Inconsolata SemiExpanded ExtraLight\r\nInconsolata SemiExpanded,Inconsolata SemiExpanded Light\r\nInconsolata SemiExpanded,Inconsolata SemiExpanded Medium\r\nInconsolata SemiExpanded,Inconsolata SemiExpanded SemiBold\r\nInconsolata UltraCondensed\r\nInconsolata UltraCondensed,Inconsolata UltraCondensed Black\r\nInconsolata UltraCondensed,Inconsolata UltraCondensed ExtraBold\r\nInconsolata UltraCondensed,Inconsolata UltraCondensed ExtraLight\r\nInconsolata UltraCondensed,Inconsolata UltraCondensed Light\r\nInconsolata UltraCondensed,Inconsolata UltraCondensed Medium\r\nInconsolata UltraCondensed,Inconsolata UltraCondensed SemiBold\r\nInconsolata UltraExpanded\r\nInconsolata UltraExpanded,Inconsolata UltraExpanded Black\r\nInconsolata UltraExpanded,Inconsolata UltraExpanded ExtraBold\r\nInconsolata UltraExpanded,Inconsolata UltraExpanded ExtraLight\r\nInconsolata UltraExpanded,Inconsolata UltraExpanded Light\r\nInconsolata UltraExpanded,Inconsolata UltraExpanded Medium\r\nInconsolata UltraExpanded,Inconsolata UltraExpanded SemiBold\r\nInconsolata,Inconsolata Black\r\nInconsolata,Inconsolata ExtraBold\r\nInconsolata,Inconsolata ExtraLight\r\nInconsolata,Inconsolata Light\r\nInconsolata,Inconsolata Medium\r\nInconsolata,Inconsolata SemiBold\r\nInput Mono\r\nInput Mono Compressed\r\nInput Mono Compressed,InputMonoCompressed Black\r\nInput Mono Compressed,InputMonoCompressed ExLight\r\nInput Mono Compressed,InputMonoCompressed Light\r\nInput Mono Compressed,InputMonoCompressed Medium\r\nInput Mono Compressed,InputMonoCompressed Thin\r\nInput Mono Condensed\r\nInput Mono Condensed,InputMonoCondensed Black\r\nInput Mono Condensed,InputMonoCondensed ExLight\r\nInput Mono Condensed,InputMonoCondensed Light\r\nInput Mono Condensed,InputMonoCondensed Medium\r\nInput Mono Condensed,InputMonoCondensed Thin\r\nInput Mono Narrow\r\nInput Mono Narrow,InputMonoNarrow Black\r\nInput Mono Narrow,InputMonoNarrow ExLight\r\nInput Mono Narrow,InputMonoNarrow Light\r\nInput Mono Narrow,InputMonoNarrow Medium\r\nInput Mono Narrow,InputMonoNarrow Thin\r\nInput Mono,InputMono Black\r\nInput Mono,InputMono ExLight\r\nInput Mono,InputMono Light\r\nInput Mono,InputMono Medium\r\nInput Mono,InputMono Thin\r\nLiberation Mono\r\nMenlo\r\nMiguta\r\nPT Mono\r\nRoboto Mono\r\nSource Code Pro,Source Code Pro ExtraLight\r\n```\n:::\n:::\n\n\n### Using Python+Terminal\n\nAnother way to get at this information is to try asking matplotlib what fonts it *already* knows about in its cache:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport matplotlib\nloc = matplotlib.get_cachedir()\n!ls {loc}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfontlist-v330.json fontlist-v390.json\r\n```\n:::\n:::\n\n\nHopefully you will see a list of installed fonts when you run this next block of code. See if you can make sense of what this code does!\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfonts = !cat {loc + '/fontlist-v330.json'}\nfonts = set(list(filter(lambda x:'\"name\"' in x, fonts)))\nfonts = [x.replace('      \"name\": \"','').replace('\",','') for x in fonts]\nprint(fonts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Nadeem', 'Mishafi Gold', 'Input Serif Compressed', 'Noto Sans Carian', 'Noto Sans Old Persian', 'STIXIntegralsUpSm', 'System Font', 'STIXGeneral', '.SF Hebrew', 'Geneva', 'Gurmukhi MN', 'Iowan Old Style', 'PT Sans', '.ThonburiUI', 'Input Sans Condensed', 'Noto Sans Cypriot', 'Symbol', 'Superclarendon', 'Noto Sans Kaithi', 'Noto Sans Palmyrene', 'Roboto Serif 72pt Condensed', 'STIXIntegralsSm', 'Noto Sans Tirhuta', 'ESRI Default Marker', 'Beirut', 'Bergamo Std', 'Inconsolata SemiCondensed', 'Noto Sans Limbu', 'Noto Serif Myanmar', 'Noto Sans Hanifi Rohingya', 'Noto Sans Chakma', 'Noto Sans Ol Chiki', 'Roboto Serif 120pt', 'Futura', 'PT Serif', 'Geeza Pro', 'Star Jedi Hollow', 'Noto Sans Bhaiksuki', 'Klavika', 'Noto Sans Lydian', 'Noteworthy', '.SF Soft Numeric', 'STIXIntegralsUp', 'ITF Devanagari', 'Trebuchet MS', 'Roboto Serif 120pt ExtraExpanded', 'Wingdings 2', 'Noto Sans Mro', 'Roboto Serif 28pt SemiExpanded', 'Input Sans', 'Roboto Serif 72pt SemiCondensed', 'ZapfDingbats', 'Corsiva Hebrew', 'Bodoni 72', 'Roboto Serif 120pt Expanded', 'Noto Sans Nabataean', '.SF Georgian Rounded', 'Noto Sans Elbasan', 'DejaVu Sans Mono', 'Khmer MN', 'OS OpenMap Local', 'Noto Sans Yi', 'Computer Modern', 'DIN Condensed', 'Luminari', 'Roboto Serif 72pt UltraCondensed', 'Wingdings 3', 'RODE Noto Sans CJK SC R', 'Noto Sans Lepcha', 'Noto Sans Syloti Nagri', 'Heiti TC', 'Gasolyn Free', 'Input Serif Narrow', 'Roboto Serif 72pt SemiExpanded', 'Noto Sans Buhid', 'Roboto Serif ExtraExpanded', 'Telugu MN', 'Input Mono', 'Baskerville', 'Noto Sans Saurashtra', 'Roboto Serif 120pt SemiExpanded', 'Sana', 'Phosphate', 'STIX Two Math', 'Liberation Serif', 'Noto Sans Gunjala Gondi', 'Khula', 'Rolves Free', 'Noto Serif Balinese', 'DejaVu Sans Display', 'Arial Narrow', 'Amethyst', 'ESRI Transportation & Civic', 'Sinhala Sangam MN', 'Arial Black', 'Olympicons 2', 'ITC Avant Garde Gothic', 'Noto Sans Armenian', 'Lucida Grande', 'Shree Devanagari 714', 'Norse', 'Helvetica', '.SF NS Rounded', 'Inconsolata Expanded', 'Gurmukhi Sangam MN', 'Noto Sans Lisu', 'Seravek', '.Aqua Kana', 'Big Caslon', 'Noto Sans Meroitic', 'Noto Sans Brahmi', 'Bodoni Ornaments', 'Menlo', 'Noto Sans Gothic', 'Silom', 'Avenir Next', 'RODE Noto Sans Hindi R', 'Noto Sans Linear A', 'DejaVu Serif', 'Roboto Serif Expanded', 'Didot', 'Roboto Serif UltraCondensed', 'Al Nile', 'Roboto Serif 72pt ExtraExpanded', 'Roboto Serif 28pt Condensed', 'Noto Sans Buginese', 'Noto Sans Vai', 'Noto Sans Tai Viet', 'ITC Zapf Dingbats', '.SF Hebrew Rounded', 'Noto Sans Hatran', 'Tahoma', 'Noto Sans Manichaean', 'Roboto Serif 36pt Expanded', 'Spectral', 'STIXSizeThreeSym', 'Myanmar MN', 'Roboto Serif 120pt UltraCondensed', 'Oriya MN', 'Roboto Serif 28pt SemiCondensed', 'Roboto Serif 36pt SemiExpanded', 'Noto Sans Linear B', 'Noto Sans Phoenician', 'Devanagari MT', '.SF Armenian', 'Fira Code', 'Helvetica Neue', 'Al Bayan', '.New York', 'Academy Engraved LET', 'Kannada Sangam MN', 'Herculanum', 'Chalkduster', 'Noble Company', 'Noto Sans Mandaic', 'Noto Sans Thaana', 'Apple SD Gothic Neo', 'Noto Sans Egyptian Hieroglyphs', 'Gujarati Sangam MN', 'Inconsolata UltraExpanded', '.SF Compact Rounded', 'Papyrus', 'Hiragino Mincho ProN', 'Optima', 'Noto Sans NKo', 'Kubos', 'Galvji', 'Verdana', 'Noto Sans Sundanese', '.SF Camera', 'Zapf Dingbats', 'Arial Unicode MS', '.SF Arabic Rounded', '.SF NS Mono', 'Apple Braille', 'Inconsolata', 'Hiragino Sans', 'Gill Sans', 'Roboto Serif 72pt Expanded', 'Courier New', 'Baghdad', 'Noto Sans Psalter Pahlavi', 'Noto Sans Adlam', 'Gurmukhi MT', 'Roboto Serif 36pt Condensed', 'Noto Sans Pau Cin Hau', 'Roboto Serif 28pt ExtraExpanded', 'Noto Sans Caucasian Albanian', 'Noto Sans Mahajani', 'Marion', 'STIXVariants', 'Noto Sans Hanunoo', 'Farah', 'Rockwell', '.SF Arabic', 'Courier', 'Noto Sans Warang Citi', 'Noto Sans Pahawh Hmong', 'Raanana', 'Roboto Serif 36pt ExtraExpanded', 'Noto Sans Tifinagh', 'Bergamo Pro', 'cmss10', 'Andale Mono', 'Arial Hebrew', 'Noto Sans Tagbanwa', 'Athelas', 'Snell Roundhand', 'Plantagenet Cherokee', 'Arial Rounded MT Bold', 'Noto Sans Glagolitic', 'Sathu', 'Noto Sans Siddham', 'Noto Sans Bassa Vah', 'Roboto Serif 36pt ExtraCondensed', 'Liberation Sans Narrow', 'Roboto Serif 72pt', 'Kokonor', 'Party LET', 'Noto Sans Takri', 'ESRI Public1', 'Noto Sans Wancho', 'Diwan Kufi', 'Lao Sangam MN', 'Muna', 'ESRI US MUTCD 2', 'PT Serif Caption', 'Noto Sans Duployan', 'Noto Sans Oriya', 'Times New Roman', 'JetBrains Mono', 'cmr10', '.SF Armenian Rounded', 'Inconsolata ExtraCondensed', 'Microsoft Sans Serif', 'Devanagari Sangam MN', 'Apple Chancery', 'Arial', 'Euphemia UCAS', 'Krungthep', 'Kannada MN', 'Liberation Sans', 'Roboto Serif ExtraCondensed', 'Noto Serif Hmong Nyiakeng', 'Bangla Sangam MN', 'Avenir Next Condensed', 'Georgia', 'Noto Nastaliq Urdu', 'Thonburi', 'Noto Sans Multani', 'Olympicons', 'Bodoni 72 Smallcaps', 'Roboto Serif 28pt Expanded', 'Noto Sans Osmanya', 'Noto Sans PhagsPa', 'Input Serif', 'Monaco', 'Tamil MN', 'Noto Sans Osage', 'Roboto Serif SemiCondensed', 'Noto Sans Avestan', 'Input Mono Condensed', 'Noto Sans Old Permic', 'Mshtakan', 'cmmi10', 'Noto Sans Kayah Li', 'STIXSizeFourSym', 'Noto Sans Old Hungarian', 'Input Mono Narrow', 'Damascus', 'Roboto Serif 28pt UltraCondensed', 'AppleMyungjo', 'Ayuthaya', 'Fira Sans Condensed', 'Roboto Serif 120pt Condensed', 'Barlow', 'Mishafi', 'Avenir', 'STIXNonUnicode', 'Noto Sans Inscriptional Parthian', 'Noto Sans Khudawadi', '.SF Compact', 'Roboto Serif 36pt', 'DejaVu Sans', 'Roboto Serif 36pt SemiCondensed', 'Input Sans Compressed', 'Noto Sans Marchen', 'Noto Sans Sharada', 'Copperplate', 'Inconsolata SemiExpanded', 'SignPainter', 'Fira Sans', 'KingsBureauGrot', 'STIXIntegralsD', 'Noto Sans Kharoshthi', 'Noto Sans Ugaritic', 'Noto Sans Mongolian', 'Fira Sans Extra Condensed', 'STIXIntegralsUpD', 'Malayalam Sangam MN', 'ESRI US MUTCD 1', 'Noto Sans Samaritan', 'Noto Sans Batak', 'Kailasa', 'Roboto Serif 120pt ExtraCondensed', 'Webdings', 'Noto Sans Old Turkic', 'Noto Sans Masaram Gondi', 'Kohinoor Devanagari', 'Hiragino Sans GB', 'Noto Sans Newa', 'Noto Sans New Tai Lue', 'Liberation Mono', 'Roboto Serif 72pt ExtraCondensed', 'STIXSizeOneSym', 'STIXSizeFiveSym', 'Noto Sans Sora Sompeng', 'KufiStandardGK', 'Input Sans Narrow', 'DecoType Naskh', 'Noto Sans Mende Kikakui', 'Noto Sans Old North Arabian', 'RODE Noto Sans CJK SC B', 'Noto Sans Kannada', 'Marker Felt', 'Noto Sans Myanmar', 'Lao MN', 'Oriya Sangam MN', 'Farisi', 'Source Serif Pro', 'SourceCodePro+Powerline+Awesome Regular', 'Noto Sans Tai Le', 'Noto Sans Tai Tham', 'DejaVu Serif Display', 'Bodoni 72 Oldstyle', 'cmex10', 'Roboto Serif 120pt SemiCondensed', 'Apple Symbols', 'Charter', 'PingFang HK', 'Roboto Serif SemiExpanded', 'Input Mono Compressed', 'Chalkboard SE', 'Tamil Sangam MN', 'Telugu Sangam MN', 'Noto Sans Syriac', 'Cochin', 'Roboto Serif', 'Palatino', 'STIXSizeTwoSym', 'Noto Sans Inscriptional Pahlavi', 'Songti SC', 'Noto Sans Bamum', 'Input Serif Condensed', 'Kings Caslon Display', 'cmtt10', 'RODE Noto Sans Hindi B', 'cmb10', 'American Typewriter', 'AppleGothic', 'Waseem', 'Noto Sans Cham', 'PT Mono', 'Noto Sans Meetei Mayek', 'STIX Two Text', 'Gujarati MT', 'Bradley Hand', 'DIN Alternate', 'Utopia', 'Star Jedi', 'Mukta Mahee', 'Johnston ITC Std', 'Inconsolata UltraCondensed', 'Trattatello', 'Kohinoor Bangla', 'Noto Sans Tagalog', 'Noto Sans Cuneiform', '.SF Georgian', 'ESRI US MUTCD 3', 'Noto Sans Coptic', 'Al Tarikh', 'Kings Caslon Text', 'Noto Sans Rejang', 'Noto Serif Ahom', 'Noto Sans Imperial Aramaic', 'Kefa', 'Noto Sans Canadian Aboriginal', 'Chalkboard', 'Skia', 'New Century Schoolbook', 'Brush Script MT', 'Comic Sans MS', 'Myanmar Sangam MN', 'bridamount', 'Hiragino Maru Gothic Pro', 'Roboto', 'Roboto Serif Condensed', 'Wingdings', 'Kohinoor Gujarati', 'Khmer Sangam MN', 'Noto Sans Modi', 'Sukhumvit Set', 'InaiMathi', 'Noto Sans Old South Arabian', 'Roboto Serif 28pt', 'Malayalam MN', 'Kohinoor Telugu', 'Zapfino', 'cmsy10', 'ITC Bookman', 'Roboto Serif 28pt ExtraCondensed', 'Inconsolata ExtraExpanded', 'Bergamo Caps', 'Noto Sans Javanese', 'ITC Zapf Chancery', '.Keyboard', 'Fira Mono', 'Noto Sans Old Italic', 'Noto Sans Lycian', 'Impact', 'Miguta', 'Diwan Thuluth', 'Times', 'Noto Sans Khojki', 'Roboto Serif 36pt UltraCondensed', 'New Peninim MT', 'Noto Sans Miao', 'Hoefler Text', 'Savoye LET', 'Bangla MN', 'Noto Serif Yezidi', 'Gallagher', 'Sinhala MN', 'Inconsolata Condensed']\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfonts = ! fc-list : family style | grep \"Ubuntu\"\nprint(sorted(fonts))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n```\n:::\n:::\n\n\n### Fontdicts\n\nNow that we know what's available, the next step is to set up some useful defaults that we can re-use across multiple plots to ensure consistency of output. The format for specifying fonts on a per-figure basis is a dictionary, so where you see `fontdict` in the `matplotlib` [documentation](https://matplotlib.org/stable/gallery/text_labels_and_annotations/text_fontdict.html) the following should work:\n\nHere's the example:\n\n```python\nfont = {'family': 'serif',\n        'color':  'darkred',\n        'weight': 'normal',\n        'size': 16,\n        }\n```\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ntfont = {'fontname':'Liberation Sans Narrow', 'weight':'bold'}\nbfont = {'fontname':'Liberation Sans Narrow', 'weight':'normal', 'horizontalalignment':'left'}\nafont = {'fontname':'Liberation Sans Narrow', 'weight':'light'}\n```\n:::\n\n\nI am setting the 'title font' (`tfont`) and 'body copy font' (`bfont`) and 'axis font' (`afont`) here to use in the output below. You can pick another font and see what happens. \n\n### 2.3: Using Fonts\n\nAt this point we're going to work towards a kind of 'atlas' that would make it easy to compare some features for different London boroughs. I basically implemented a the basic `matplotlib` version of QGIS' Atlas functionality.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# This will be wahtever LA you processed last week\nLA = 'Waltham Forest'\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nmsoa_gdf = gpd.read_parquet(os.path.join('data','geo',f'{LA}-MSOA_data.geoparquet'))\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmedian_gdf  = msoa_gdf[['MSOA11CD','median_price','geometry']]\nlisting_gdf = msoa_gdf[['MSOA11CD','listing_count','geometry']]\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n### The Defaults\n\nHere is a demonstration of some of the ways you can adjust features in a Python matplotlib plot. I'm not suggesting either of these is a _good_ output, but that's not the point! The idea is to see the various ways you can tweak a plot... And notice that we've not yet changed any fonts. And it shows.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Set up a 1 x 2 plot (you can also leave off the nrows= and ncols=)\nf,axes = plt.subplots(nrows=1, ncols=2, figsize=(8,6))\n# ax1 will be the first plot on the left, ax2 will be on the right;\n# a 2 (or more) *row* plot will return a list of lists... 1 list/row.\nax1 = axes[0]\nax2 = axes[1]\n\n# Left plot is the median price\nmedian_gdf.plot(column='median_price', ax=ax1, legend=True, cmap='viridis')\nax1.set_title(\"Median Price per MSOA\");\n# Turn off the frame, one side of the plat at a time\nax1.spines['top'].set_visible(False)\nax1.spines['right'].set_visible(False)\nax1.spines['bottom'].set_visible(False)\nax1.spines['left'].set_visible(False)\n# Set the labels\nax1.set_xlabel(\"Easting\");\nax1.set_ylabel(\"Northing\");\n\n# Right plot is the number of listings; note\n# here the use of both zorder (which is the \n# 'stacking order' of elements on the plot, and\n# the legend_kwds (keywords) to change the \n# orientation of the plot to horizontal\nlisting_gdf.plot(column='listing_count', ax=ax2, legend=True, cmap='plasma', zorder=1, \n                 legend_kwds={\"orientation\": \"horizontal\"})\nax2.set_title(\"Count of Listings per MSOA\");\n# Set a background colour for the plot\nax2.set_facecolor((.4, .4, .4, .2))\n# Add grid lines and set their zorder to\n# below that of the data on the plot\nplt.grid(visible=True, which='major', axis='both', color='w', linestyle='-', linewidth=2, zorder=0)\nax2.set_axisbelow(True)\n\n# This is equivalent to the ax1.spines... \n# above, but if you use it here you lose\n# the background to the plot as well!\n#plt.gca().set(frame_on=False)\n\n# Remove the labels on the ticks of the \n# axes (meaning: remove the numbers on \n# x- and y-axes).\nax2.set_xticklabels([])\nax2.set_yticklabels([])\n\n# Set the labels\nax2.set_xlabel(\"Easting\");\nax2.set_ylabel(\"Northing\");\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-09-Presenting_Data_files/figure-pdf/cell-16-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Improving on Defaults\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nf,axes = plt.subplots(1,2,figsize=(8,6))\n\n# Set up the plots\nmedian_gdf.plot(column='median_price', ax=axes[0], legend=True, cmap='viridis')\nlisting_gdf.plot(column='listing_count', ax=axes[1], legend=True, cmap='plasma')\nfor ax in axes:\n    ax.axis('off')\n    # Note that here, set_facebolor doesn't work,\n    # presumably because the axis is 'off'\n    ax.set_facecolor((.4, .4, .4, .2))\n\n# Add the 'super-title', but notice that it is not \n# longer either centered (x=0.025) or centre-aligned\n# (horizonal alignment=left). We also see **tfont, which\n# is a way of expading the 'tfont' dictionary into a \n# set of parameters to a function call. We do the same\n# for the titles on each figure, but passing a different\n# fontdict.\nf.suptitle(LA, x=0.025, ha='left', size=24, **tfont)\naxes[0].set_title('Median Price', size=20, **afont)\naxes[1].set_title('Count', size=20, **afont)\n\n# And add a short piece of text below the borough\nplt.figtext(x=0.025, y=0.92, linespacing=1.4, va='top', size=12, \n            s=f\"Total listings: {listing_gdf['listing_count'].sum():,.0f}\\nMedian price: ${median_gdf['median_price'].median():,.2f}\", **bfont);\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-09-Presenting_Data_files/figure-pdf/cell-17-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n# Create an Atlas\n\n## Adding Picture-in-Picture \n\nWe're now going to emulate a _bit_ of QGIS' Atlas function by creating two subplots and then adding a _third_ plot afterwards that shows where the borough is.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nf,axes = plt.subplots(1,3,gridspec_kw={'width_ratios':[1,4,4]}, figsize=(8,6))\n\n# Plot 0 is basically being used as a 'spacer' \n# as you'll see below\naxes[0].axis('off')\n\n# Plot 1 is the median price\nmedian_gdf.plot(column='median_price', ax=axes[1], legend=True, cmap='viridis')\naxes[1].set_title('Median Price', size=20, **afont)\n\n# Plot 2 is the count of listings\nlisting_gdf.plot(column='listing_count', ax=axes[2], legend=True, cmap='plasma')\naxes[2].set_title('Count', size=20, **afont)\n\n# For plots 1 and 2... if you were doing this a lot it could be a function!\nfor ax in axes[1:]:\n    ax.set_facecolor((.9, .9, .9, .5))\n    ax.grid(visible=True, which='major', axis='both', color='w', linestyle='-', linewidth=2, zorder=0)\n    ax.set_axisbelow(True)\n    ax.spines['top'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.tick_params(axis='both', which='both', length=0)\n\n# Add a *third* chart that we use as a kind of 'PiP'\n# to show which borough we're talking about. The \n# add_axes call is here taking information about the\n# positioning and size of the additional figure.\n# Disable ax2.axis('off') if you want to see the\n# figure in full.\nax3 = f.add_axes([0.015, 0.7, 0.2, 0.2])\nspath = 'https://github.com/jreades/fsds/blob/master/data/src/' # source path\nddir  = os.path.join('data','geo') #Â destination directory\nboros = gpd.read_file( cache_data(spath+'Boroughs.gpkg?raw=true', ddir) )\nboros.plot(facecolor='lightgrey', edgecolor='w', linewidth=1, ax=ax3)\nboros[boros.NAME==LA].plot(facecolor='r', edgecolor='none', hatch='///', ax=ax3)\nax3.axis('off')\n\n# Add the 'super-title', but notice that it is not \n# longer either centered (x=0.025) or centre-aligned\n# (horizonal alignment=left). We also see **tfont, which\n# is a way of expanding the 'tfont' dictionary into a \n# set of parameters to a function call. We do the same\n# for the titles on each figure, but passing a different\n# fontdict.\nf.suptitle(LA, x=0.025, ha='left', size=24, **tfont)\n\n# And add a short piece of text below the borough\nplt.figtext(x=0.025, y=0.65, s=f\"Total listings: {listing_gdf['listing_count'].sum():,.0f}\", size=12, **bfont);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/geo/Boroughs.gpkg locally!\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Practical-09-Presenting_Data_files/figure-pdf/cell-18-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Bonus Achievement Unlocked!\n\nIf you have the time and inclination, see if you can convert the above to an _actual_ atlas output: \n\n1. You'll want to turn this plot into a function so as to be able to produce (and save) the map for _every_ borough. \n2. You'll even need to parameterise the filename so that you save to _different_ PNG files as well as going back to see how we generated the listing and pricing data frames for the Local Authority... \n3. And you'll *also* need to make sure that you ensure a consistent colour bar (for all of London, because the median price and number of listings will vary rather a lot by LA)\n4. Then there's the placement of the PiP for some boroughs with long names\n5. And finally, you might consider adding some more text to atlas--maybe pull some content from Wikipedia using Beautiful Soup (`bs4`)?\n\n# Think Text!\n\nI also wanted to draw your attention to this [outstanding piece](https://blog.datawrapper.de/text-in-data-visualizations/) on using text effectively in data visualisation: we often add labels as afterthoughts without too much regard for where they go or how they look; however, getting the content, positioning, size, and even font/font-weight 'right' can make all the difference to the effectiveness of your chart! The illustrations are top-notch.\n\nAnd see the bibliography at the end!\n\n::: {.callout-tip}\n#### Bookmark Me!\n\nBasically, bookmark [this blog post](https://blog.datawrapper.de/text-in-data-visualizations/) and refer to it every time you are making a map or chart.\n\n:::\n\n# Using Bokeh\n\nBokeh can do a *lot* more than this, but I just wanted to give you a flavour of the other visualisation tools supported by Python. This obviously works *very* differently in setup and use.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ngdf_la = gpd.read_parquet(os.path.join('data','geo','Listings_with_LA.geoparquet'))\nmsoas  = gpd.read_parquet(os.path.join('data','geo','London_MSOA_Names.geoparquet'))\n```\n:::\n\n\n## For a Chart\n\nGroup the listings by Borough and Room Type, and aggregate by median price, also producing a count variable for the number of listings of each type in each Borough.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nla_tots = gdf_la[gdf_la.NAME==LA].groupby(by='room_type', observed=False).agg(\n                            {'price':'median', 'listing_url':'count'}\n                        ).reset_index().rename(columns={'listing_url':'count'})\nla_tots\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>room_type</th>\n      <th>price</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Entire home/apt</td>\n      <td>117.0</td>\n      <td>946</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Hotel room</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Private room</td>\n      <td>47.0</td>\n      <td>687</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Shared room</td>\n      <td>24.5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom bokeh.palettes import Spectral4\nfrom bokeh.models import CustomJS, Dropdown\n\noutput_notebook()\n\nroom_types = la_tots.room_type.to_list()\nprices     = la_tots.price.to_list()\ncounts     = la_tots['count'].to_list()\n\n# Add hover tooltip\nsource = ColumnDataSource(data=dict(\n    rt=room_types,\n    count=counts,\n    price=prices,\n))\n\nTOOLTIPS = [\n    (\"Room Type\", \"@rt\"),\n    (\"Number of Listings\", \"@count{,}\"),\n    (\"Median Price\", \"$@price{,}/night\")\n]\n\np = figure(x_range=room_types, height=300, tooltips=TOOLTIPS,\n           title=f\"Median Price by Room Type in {LA}\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x='rt', top='count', width=0.9, source=source)\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): application/javascript, application/vnd.bokehjs_load.v0+json\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): application/javascript, application/vnd.bokehjs_exec.v0+json\n```\n:::\n:::\n\n\n## For a Map\n\nThis is not the prettiest code, but it should work...\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nfrom bokeh.plotting import figure\n\nfrom bokeh.io import output_file, show, output_notebook, push_notebook, export_png\nfrom bokeh.models import ColumnDataSource, GeoJSONDataSource, LinearColorMapper, ColorBar, HoverTool\nfrom bokeh.plotting import figure\nfrom bokeh.palettes import brewer\n\n#output_notebook()\n```\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nmsoadf = gpd.sjoin(\n            gdf_la[gdf_la.NAME==LA].reset_index(), \n            msoas[msoas.Borough==LA].drop(columns=['index_right']), predicate='within')\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmsoagrdf = msoadf.groupby('MSOA11NM').agg({'price':['median','count']}).reset_index()\nmsoagrdf.columns=['msoa11nm','median','count']\n```\n:::\n\n\nI cobbled the mapping functions below together from two tutorials I found online ([this one](https://github.com/dmnfarrell/teaching/blob/master/geo/maps_python.ipynb) and [this one](https://widdowquinn.github.io/Teaching-Data-Visualisation/exercises/interactive_bokeh_map/interactive_bokeh_map.html)). As you can see, this is a very different approach to mapping data, but it has clear benefits for exploratory purposes and produces fast, interactive maps... and I've not even added selection and filtering tools!\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nimport json\n\ndef get_geodatasource(gdf):    \n    \"\"\"Get getjsondatasource from geopandas object\"\"\"\n    json_data = json.dumps(json.loads(gdf.to_json()))\n    return GeoJSONDataSource(geojson = json_data)\n\ndef bokeh_plot_map(gdf, column=None, title=''):\n    \"\"\"Plot bokeh map from GeoJSONDataSource \"\"\"\n\n    geosource = get_geodatasource(gdf)\n    palette = brewer['OrRd'][8]\n    palette = palette[::-1]\n    vals = gdf[column]\n    \n    #Instantiate LinearColorMapper that linearly maps numbers in a range, into a sequence of colors.\n    color_mapper = LinearColorMapper(palette=palette, low=vals.min(), high=vals.max())\n    color_bar = ColorBar(color_mapper=color_mapper, label_standoff=8, width=500, height=10,\n                         location=(0,0), orientation='horizontal')\n\n    tools = 'wheel_zoom,pan,reset,hover'\n    \n    p = figure(title = title, height=700, width=850, toolbar_location='right', tools=tools)\n    p.add_tile(\"CartoDB Positron\", retina=True)\n    p.xgrid.grid_line_color = None\n    p.ygrid.grid_line_color = None\n    \n    # Add patch renderer to figure\n    p.patches('xs','ys', source=geosource, fill_alpha=0.5, line_width=0.5, line_color='white',  \n              fill_color={'field' :column , 'transform': color_mapper})\n    \n    # Specify figure layout.\n    p.add_layout(color_bar, 'below')\n    \n    # Add hover\n    hover = p.select_one(HoverTool)\n    hover.point_policy = \"follow_mouse\"\n    hover.tooltips = [(\"Borough\", \"@Borough\"),\n                      (\"Neighbourhood\", \"@msoa11hclnm\"),\n                      (\"Count of Listings\", \"@count\"),\n                      (\"Median Price\", \"$@median\")]\n    \n    return p\n```\n:::\n\n\nReproject to Web Mercator:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nmsoa_gdf = pd.merge(msoagrdf, msoas, left_on='msoa11nm', right_on='MSOA11NM', how='inner')\nmsoa_gdf = msoa_gdf.set_geometry('geometry').set_crs('epsg:27700')\n```\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nmsoageo = msoa_gdf.to_crs('epsg:3785')\nmsoageo.total_bounds\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\narray([-6.74542047e+03,  6.71906611e+06,  3.04361304e+03,  6.73637453e+06])\n```\n:::\n:::\n\n\nAnd map it!\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\np = bokeh_plot_map(msoageo, 'median', title=f'MSOA-Level Activity in {LA}')\n\nhandle = show(p, notebook_handle=True)\npush_notebook(handle=handle)\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): application/javascript, application/vnd.bokehjs_exec.v0+json\n```\n:::\n:::\n\n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nAnd that's it. That's all she wrote! You've now covered in <10 weeks what many people might take 10 _months_ to cover. So do not feel like either: 1) you know it all; or 2) you know nothing. You have learned a _lot_, but it's probably just enough to see how much you _don't_ know. And *that* is the start of wisdom. Good luck, young Python-master!\n\n:::\n\n",
    "supporting": [
      "Practical-09-Presenting_Data_files/figure-pdf"
    ],
    "filters": []
  }
}
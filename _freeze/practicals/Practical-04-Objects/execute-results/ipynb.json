{
  "hash": "886e807c4e33d3b75ff00793c244aac5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Practical 4: Object-Oriented Programming\"\nsubtitle: \"Getting to grips with Functions & Packages\"\njupyter: python3\nfilters:\n  - qna\n  - quarto\n---\n\n\n| Complete | Part 1: Foundations | Part 2: Data | Part 3: Analysis |     |\n| :------- | :------------------ | :----------- | :--------------- | --: |\n| 30% | &#9619;&#9619;&#9619;&#9619;&#9619;&#9619;&#9619;&#9617; | &#9617;&#9617;&#9617;&#9617;&#9617;&#9617; | &#9617;&#9617;&#9617;&#9617;&#9617;&#9617; | 4/10\n\nThis is a very challenging notebook because it takes you *both* through the process of building a function incrementally *and* through a 'simple' example of how Python classes actually work. You will need to understand these two very different elements in order to make the most of the remaining 6 weeks of term, because we both improve our code incrementally *and* make use of objects and their inheritances extensively. You also get an extra chance to revisit the differences between LoLs and DoLs because you will undoubtedly encounter and make use of these data structures even *after* you become a skillfull Python programmer.\n\n::: {.callout-warning}\n\nThis is a very challenging practical and you should do your best to ensure that you actually understand what you have done and why.\n\n::: \n\n::: {.callout-tip}\n\n#### Group Sign-Up\n\nYou should now make it a priority [Sign Up]({{< var module.signup >}})!\n\n\n:::\n\n# Why 'Obvious' is Not Always 'Right' (Revisited)\n\nPractical 3 is hard, so I want to provide _another_ chance for the concepts to bed in before we use them in an *object-oriented way through Pandas*. Yes, Week 5 will show how we combine concepts covered over the preceding two weeks in *practice* to 'do data science'.\n\nFirst, remember the finding from last week: if we don't really care about column order, then a dictionary of lists is a nice way to handle data. And why should we care about column order? With our CSV file we saw what a pain it was to fix things when even a tiny thing like the layout of the columns changed. But if, instead, we could just reference the 'Description' column in the data set then it doesn't matter where that column actually is *and* we would know that all the descriptions would be *text*, while all the populations or prices would be *numbers*. Why is that? \n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nThis task briefly recaps the final part of [Practical 2](https://jreades.github.io/fsds/sessions/week3.html#practical) and builds on the [DOLs to Data](https://jreades.github.io/fsds/sessions/week3.html#lectures) and [Functions](https://jreades.github.io/fsds/sessions/week3.html#lectures) lectures.\n\n:::\n\n## The Way That Doesn't Work\n\nRecall that this is how four rows of 'data' for city sizes organised by _row_ as a list-of-lists look:\n\n::: {#fe11e088 .cell execution_count=2}\n``` {.python .cell-code}\nmyData = [\n    ['id', 'Name', 'Rank', 'Longitude', 'Latitude', 'Population'], \n    ['1', 'Greater London', '1', '-18162.92767', '6711153.709', '9787426'], \n    ['2', 'Greater Manchester', '2', '-251761.802', '7073067.458', '2553379'], \n    ['3', 'West Midlands', '3', '-210635.2396', '6878950.083', '2440986']\n]\n```\n:::\n\n\nTo print out a list of every city in the data set *when* we don't know where the `Name` column is in the file we have to jump through some hoops:\n\n::: {#76764dbc .cell execution_count=3}\n``` {.python .cell-code}\ncities = []\n\ncol    = myData[0].index('Name')\nfor i in range(1, len(myData)):\n    cities.append(myData[i][col])\n\nprint(\"The cities in the data set are: \" + \", \".join(cities))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe cities in the data set are: Greater London, Greater Manchester, West Midlands\n```\n:::\n:::\n\n\nAnd it's the same kind of faff if we want to find out if `Edinburgh` is included in the data set:\n\n::: {#b5d52117 .cell execution_count=4}\n``` {.python .cell-code}\ncol   = myData[0].index('Name')\nfound = False\nfor i in range(1, len(myData)):\n    if myData[i][col] == 'Edinburgh':\n        print(\"Found Edinburgh in the data set!\")\n        found = True\n        break\n\nif found == False:\n    print(\"Didn't find Edinburgh in the data set.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDidn't find Edinburgh in the data set.\n```\n:::\n:::\n\n\n## The Way That Does Work\n\nCompare that code to how it works for a dictionary-of-lists organised by _column_. Now try printing out the cities in the data:\n\n::: {#f43d5035 .cell execution_count=5}\n``` {.python .cell-code}\nmyData = {\n    'id'         : [0, 1, 2, 3, 4, 5],\n    'Name'       : ['Greater London', 'Greater Manchester', 'Birmingham','Edinburgh','Inverness','Lerwick'],\n    'Rank'       : [1, 2, 3, 4, 5, 6],\n    'Longitude'  : [-0.128, -2.245, -1.903, -3.189, -4.223, -1.145],\n    'Latitude'   : [51.507, 53.479, 52.480, 55.953, 57.478, 60.155],\n    'Population' : [9787426, 2705000, 1141816, 901455, 70000, 6958],\n}\n```\n:::\n\n\nTo print out a list of every city in the data set:\n\n::: {#f7b6e84a .cell execution_count=6}\n``` {.python .cell-code}\nprint(\", \".join(myData['Name']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreater London, Greater Manchester, Birmingham, Edinburgh, Inverness, Lerwick\n```\n:::\n:::\n\n\nTo find out if `Edinburgh` is included in the list of data:\n\n::: {#815a0a37 .cell execution_count=7}\n``` {.python .cell-code}\nif 'Edinburgh' in myData['Name']:\n    print(\"Found Edinburgh in the data set!\")\nelse:\n    print(\"Didn't find Edinburgh in the data set.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound Edinburgh in the data set!\n```\n:::\n:::\n\n\nSee how even basic questions like \"Is Edinburgh in our list of data?\" are suddenly easy to answer? We no longer need to loop over the entire data set in order to find one data point. In addition, we know that everything in the 'Name' column will be a string, and that everything in the 'Longitude' column is a float, while the 'Population' column contains integers. So that's made life easier already. But let's test this out and see how it works.\n\n# Appending a Column\n\n## Calculate Mean\n\nLet's start by calculating the sample mean (use Google: `Python numpy mean...`):\n\n::: {#97290048 .cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\n# Use numpy functions to calculate mean and standard deviation\nmean = np.mean(myData['Population'])\nprint(f\"City distribution has a mean of {mean:,.0f}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCity distribution has a mean of 2,435,442.\n```\n:::\n:::\n\n\n## Calculate Standard Deviation\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty level: Low-ish.\n\n:::\n\nNow let's do the standard deviation:\n\n:::: {.qna}\n\n#### Question\n\n```python\nimport numpy as np\n# Use numpy functions to calculate mean and standard deviation\nstd  = np.??(??)\nprint(f\"City distribution has a standard deviation of {std:,.2f}.\")\n```\n\n#### Answer\n\n::: {#043c4b30 .cell execution_count=9}\n``` {.python .cell-code}\nimport numpy as np\n# Use numpy functions to calculate mean and standard deviation\nstd  = np.std(myData['Population'])\nprint(f\"City distribution has a standard deviation of {std:,.2f}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCity distribution has a standard deviation of 3,406,947.93.\n```\n:::\n:::\n\n\n::::\n\nSo the `numpy` package gives us a way to calculate the mean and standard deviation _quickly_ and without having to reinvent the wheel. The other potentially new thing here is `{std:,.2f}`. This is about [string formatting](https://www.w3schools.com/python/ref_string_format.asp) and the main thing to recognise is that this means 'format this float with commas separating the thousands/millions and 2 digits to the right'. The link I've provided uses the slightly older approach of `<str>.format()` but the formatting approach is the same.\n\n## For Loops Without For Loops\n\n::: {.callout-warning collapse=\"true\"}\n\n#### Difficulty level: Medium.\n\n:::\n\nNow we're going to see something called a **List Comprehension**.\n\nIn Python you will see code like this a lot: `[x for x in list]`. This syntax is known as a 'list comprehension' and is basically a `for` loop on one line with the output being assigned to a list. So we can apply an operation (converting to a string, subtracting a value, etc.) to every item in a list without writing out a full for loop.\n\nHere's a quick example just to show you what's going on:\n\n::: {#e2b50a4f .cell execution_count=10}\n``` {.python .cell-code}\ndemo = range(0,10) # <- a *range* of numbers between 0 and 9 (stop at 10)\nprint([x**2 for x in demo]) # square every element of demo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n:::\n:::\n\n\nNow let's apply this to our problem. We calculated the the mean and standard deviation above, so now we want to apply the z-score formula to every element of the Population list...  Remember that the format for the z-score (when dealing with a sample) is: \n\n$$\nz = \\frac{x - \\bar{x}}{s}\n$$\n\nAnd the population standard deviation (by which I mean, if you are dealing with *all* the data, and not a subsample as we are here) is:\n\n$$\nz = \\frac{x - \\mu}{\\sigma}\n$$\n\n:::: {.qna}\n\n#### Question\n\n```python\nrs = [(x - ??)/?? for x in myData['Population']] # rs == result set\nprint([f\"{x:.3f}\" for x in rs])\n```\n\n#### Answer\n\n::: {#f81ce3ef .cell execution_count=11}\n``` {.python .cell-code}\nrs = [(x - mean)/std for x in myData['Population']] # rs == result set\nprint([f\"{x:.3f}\" for x in rs])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['2.158', '0.079', '-0.380', '-0.450', '-0.694', '-0.713']\n```\n:::\n:::\n\n\n::::\n\n## Appending\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty level: trivial\n\n:::\n\nAnd now let's add it to the data set:\n\n::: {#8d281ac3 .cell execution_count=12}\n``` {.python .cell-code}\nmyData['Std. Population'] = rs\nprint(myData['Std. Population'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2.1579383252868527, 0.0791199354729932, -0.3797024575689938, -0.45025269939207097, -0.6942995760276591, -0.7128035277711219]\n```\n:::\n:::\n\n\nAnd just to show how everything is in a single data structure:\n\n::: {#2b3ec479 .cell execution_count=13}\n``` {.python .cell-code}\nfor c in myData['Name']:\n    idx = myData['Name'].index(c)\n    print(f\"{c} has a population of {myData['Population'][idx]:,} and standardised score of {myData['Std. Population'][idx]:.3f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreater London has a population of 9,787,426 and standardised score of 2.158\nGreater Manchester has a population of 2,705,000 and standardised score of 0.079\nBirmingham has a population of 1,141,816 and standardised score of -0.380\nEdinburgh has a population of 901,455 and standardised score of -0.450\nInverness has a population of 70,000 and standardised score of -0.694\nLerwick has a population of 6,958 and standardised score of -0.713\n```\n:::\n:::\n\n\n# 'Functionalising'\n\nLet's start trying to pull what we've learned over the past two weeks together by creating a a set of functions that will help us to:\n\n1. Download a file from a URL (checking if it has already _been_ downloaded to save bandwidth).\n2. Parse it as a CSV file and...\n3. Convert it to a Dictionary-of-Lists\n4. Perform some simple calculations using the resulting data.\n\nTo be honest, there's not going to be much about writing our _own_ objects here, but we will be making use of them and, conceptually, an understanding of objects and classes is going to be super-useful for understanding what we're doing in the remainder of the term!\n\n## Downloading from a URL\n\nLet's focus on the first part *first* because that's the precondition for everything else. If we can get the 'download a file from a URL' working then the rest will gradually fall into place through *iterative* improvments!\n\n### Finding an Existing Answer\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty level: Low\n\n:::\n\nFirst, let's be sensibly lazy--we've already written code to read a file from the Internet and turn it into a list of lists. So I've copy+pasted that into the code block below since we're going to start from this point; however, just to help you check your own understanding, I've removed a few bits and replaced them with `??`. Sorry, it's good practice. 😈\n\n\n\n:::: {.qna}\n\n#### Question\n\n```python\nfrom urllib.request import urlopen\nimport csv\n\nurl = \"https://raw.githubusercontent.com/jreades/fsds/master/data/src/Wikipedia-Cities-simple.csv\"\n\nurlData = [] # Somewhere to store the data\n\nresponse = urlopen(url) # Get the data using the urlopen function\ncsvfile  = csv.reader(response.read().decode('utf-8').splitlines()) # Pass it over to the reader\n\nfor row in csvfile:\n    urlData.append(??)\n\nprint(\"urlData has \" + str(len(urlData)) + \" rows and \" + str(len(urlData[0])) + \" columns.\")\nprint(urlData[-1]) # Check it worked!\n```\n\nYou should get: \n\n<code>urlData has 11 rows and 4 columns.</code>\n<br />\n<code>['Bangor', '18808', '53.228', '-4.128']</code>\n\n\n#### Answer\n\n```python\nfrom urllib.request import urlopen\nimport csv\n\nurl = \"https://raw.githubusercontent.com/jreades/fsds/master/data/src/Wikipedia-Cities-simple.csv\"\n\nurlData = [] # Somewhere to store the data\n\nresponse = urlopen(url) # Get the data using the urlopen function\ncsvfile  = csv.reader(response.read().decode('utf-8').splitlines()) # Pass it over to the reader\n\nfor row in csvfile:\n    urlData.append(row)\n\nprint(\"urlData has \" + str(len(urlData)) + \" rows and \" + str(len(urlData[0])) + \" columns.\")\nprint(urlData[-1]) # Check it worked!\n```\n\n::::\n\n### Getting Organised\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty level: Low\n\n:::\n\nLet's take the code above and modify it so that it is:\n\n1. A function that takes two arguments: a URL; and a destination filename.\n2. Implemented as a function that checks if a file exists already before downloading it again.\n\nYou will find that the `os` module helps here because of the `path` function. And you will [need to Google](https://lmgtfy.app/?q=check+if+file+exists+python) how to test if a file exists. I would normally select a StackOverflow link in the results list over anything else because there will normally be an _explanation_ included of why a particular answer is a 'good one'. I also look at which answers got the most votes (not always the same as the one that was the 'accepted answer'). In this particular case, I also found [this answer](https://careerkarma.com/blog/python-check-if-file-exists/) useful.\n\nI would start by setting my inputs:\n\n::: {#e992d90e .cell execution_count=16}\n``` {.python .cell-code}\nimport os\nurl = \"https://raw.githubusercontent.com/jreades/fsds/master/data/src/Wikipedia-Cities-simple.csv\"\nout = os.path.join('data','Wikipedia-Cities.csv') # Print `out` if you aren't sure what this has done!\n```\n:::\n\n\n### Sketching the Function\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty level: Low, if you've watched the videos...\n\n:::\n\nThen I would sketch out how my function will work using comments. And the simplest thing to start with is checking whether the file has already been downloaded:\n\n:::: {.qna}\n\n#### Question\n\n```python\nfrom urllib.request import urlopen\n\ndef get_url(src, dest):\n    \n    # Check if dest exists -- if it does\n    # then we can skip downloading the file,\n    # otherwise we have to download it!\n    if os.path.isfile(??):\n        print(f\"{dest} found!\")\n    else:\n        print(f\"{dest} *not* found!\")\n        \nget_url(url, out)\n```\n\n#### Answer\n\n::: {#00944a2d .cell execution_count=17}\n``` {.python .cell-code}\nfrom urllib.request import urlopen\n\ndef get_url(src, dest):\n\n    # Check if dest exists -- if it does\n    # then we can skip downloading the file,\n    # otherwise we have to download it!\n    if os.path.isfile(dest):\n        print(f\"{dest} found!\")\n    else:\n        print(f\"{dest} *not* found!\")\n\nget_url(url, out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata/Wikipedia-Cities.csv found!\n```\n:::\n:::\n\n\n::::\n\n### Fleshing Out the Function \n\n::: {.callout-warning collapse=\"true\"}\n\n#### Difficulty level: Medium\n\nIf you really explore what's going on in the function rather than just running it and moving on.\n\n:::\n\nI would then flesh out the code so that it downloads the file if it isn't found and then, either way, returns the *local* file path for our CSV reader to extract:\n\n::: {#b039c7b5 .cell execution_count=18}\n``` {.python .cell-code}\ndef get_url(src, dest):\n    \n    # Check if dest does *not* exist -- that\n    # would mean we had to download it!\n    if os.path.isfile(dest):\n        print(f\"{dest} found locally!\")\n    else:\n        print(f\"{dest} not found, downloading!\")\n        \n        # Get the data using the urlopen function\n        response = urlopen(src) \n        filedata = response.read().decode('utf-8')\n        \n        # Extract the part of the dest(ination) that is *not*\n        # the actual filename--have a look at how \n        # os.path.split works using `help(os.path.split)`\n        path = list(os.path.split(dest)[:-1])\n        \n        # Create any missing directories in dest(ination) path\n        # -- os.path.join is the reverse of split (as you saw above)\n        # but it doesn't work with lists... so I had to google how \n        # to use the 'splat' operator! os.makedirs creates missing \n        # directories in a path automatically.\n        if len(path) >= 1 and path[0] != '':\n            os.makedirs(os.path.join(*path), exist_ok=True)\n        \n        with open(dest, 'w') as f:\n            f.write(filedata)\n            \n        print(f\"Data written to {dest}!\")\n    \n    return dest\n        \n# Using the `return contents` line we make it easy to \n# see what our function is up to.\nsrc = get_url(url, out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata/Wikipedia-Cities.csv found locally!\n```\n:::\n:::\n\n\n::: {.callout-warning}\n\n#### Stop! \n\nIt really would be a good idea to put in the effort to make sense of how this function works. There is a lot going on here and understanding how this function works will help you to understand how to code. You should notice that we don't try to check if the data file contains any useful data! So if you download or create an empty file while testing, you won't necessarily get an error until you try to turn it into data afterwards!\n\n:::\n\n## Parse the CSV File\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty: Low\n\n:::\n\nNow we turn to the next task: parsing the file if it's a CSV. This implies that it *might* not be so that's something we should also consider!\n\n:::: {.qna}\n\n#### Question\n\n```python\nimport csv\n\ndef read_csv(src):\n    \n    csvdata = []\n    with open(src, 'r') as f:\n        csvr = csv.??(f)\n        \n        for r in csvr:\n            csvdata.append(??)\n    \n    # Return list of lists\n    return ??\n\nread_csv(src)\n#read_csv('foo.bar') # <- Notice what happens if you try to run this code\n#read_csv('Practical-04-Objects-Answers.ipynb') # Or this code!\n```\n\n#### Answer\n\n::: {#8c90c39e .cell execution_count=19}\n``` {.python .cell-code}\nimport csv\n\ndef read_csv(src):\n\n    csvdata = []\n    with open(src, 'r') as f:\n        csvr = csv.reader(f)\n\n        for r in csvr:\n            csvdata.append(r)\n\n    # Return list of lists\n    return csvdata\n\nread_csv(src)\n#read_csv('foo.bar') # <- Notice what happens if you try to run this code\n#read_csv('Practical-04-Objects-Answers.ipynb') # Or this code!\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n[['City', 'Population', 'Latitude', 'Longitude'],\n ['Perth', '45770', '56.39583', '-3.43333'],\n ['Armagh', '14777', '54.3499', '-6.6546'],\n ['Dundee', '147268', '56.462', '-2.9707'],\n ['Colchester', '194706', '51.88861', '0.90361'],\n ['Salisbury', '40302', '51.07', '-1.79'],\n ['Portsmouth', '205056', '50.80583', '-1.08722'],\n ['Wakefield', '325837', '53.683', '-1.499'],\n ['Bradford', '522452', '53.792', '-1.754'],\n ['Lancaster', '138375', '54.047', '-2.801'],\n ['Bangor', '18808', '53.228', '-4.128']]\n```\n:::\n:::\n\n\n::::\n\nYou should get:\n\n<code>\n[['City', 'Population', 'Latitude', 'Longitude'], ['Perth', '45770', '56.39583', '-3.43333'], ['Armagh', '14777', '54.3499', '-6.6546'], ['Dundee', '147268', '56.462', '-2.9707'], ['Colchester', '194706', '51.88861', '0.90361'], ['Salisbury', '40302', '51.07', '-1.79'], ['Portsmouth', '205056', '50.80583', '-1.08722'], ['Wakefield', '325837', '53.683', '-1.499'], ['Bradford', '522452', '53.792', '-1.754'], ['Lancaster', '138375', '54.047', '-2.801'], ['Bangor', '18808', '53.228', '-4.128']]\n</code>\n\n\n## Convert the CSV into a DoL\n\n::: {.callout-warning collapse=\"true\"}\n\n#### Difficulty: Medium.\n\n:::\n\nNow we can focus on converting the CSV data to a dictionary-of-lists! We're going to start with the *same* function name but expand what the function *does*. This kind of *iteration* is common in software development.\n\n:::: {.qna}\n\n#### Question\n\n```python\ndef read_csv(src):\n    \n    csvdata = {} # An empty dictionary-of-lists\n    \n    with open(??, 'r') as f:\n        csvr = csv.reader(f)\n        \n        # Read in our column names and\n        # initialise the dictionary-of-lists\n        csvcols = next(csvr) \n        for c in csvcols:\n            csvdata[c] = []\n        \n        # Notice this code is still the same, \n        # we just used next(csvr) to get the \n        # header row first!\n        for r in ??: \n            # Although you can often assume that the order \n            # of the keys is the same, Python doesn't \n            # guarantee it; this way we will always make\n            # the correct assignment.\n            for idx, c in enumerate(csvcols):\n                csvdata[??].append(r[idx])\n    \n    # Return dictionary of lists\n    return csvdata\n\nread_csv(src)\n```\n\n#### Answer\n\n::: {#de53c7d0 .cell execution_count=21}\n``` {.python .cell-code}\nimport csv\n\ndef read_csv(src):\n\n    csvdata = {} # An empty dictionary-of-lists\n\n    with open(src, 'r') as f:\n        csvr = csv.reader(f)\n\n        # Read in our column names and\n        # initialise the dictionary-of-lists\n        csvcols = next(csvr)\n        for c in csvcols:\n            csvdata[c] = []\n\n        # Notice this code is still the same,\n        # we just used next(csvr) to get the\n        # header row first!\n        for r in csvr:\n            # Although you can often assume that the order\n            # of the keys is the same, Python doesn't\n            # guarantee it; this way we will always make\n            # the correct assignment.\n            for idx, c in enumerate(csvcols):\n                csvdata[c].append(r[idx])\n\n    # Return dictionary of lists\n    return csvdata\n\nread_csv(src)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n{'City': ['Perth',\n  'Armagh',\n  'Dundee',\n  'Colchester',\n  'Salisbury',\n  'Portsmouth',\n  'Wakefield',\n  'Bradford',\n  'Lancaster',\n  'Bangor'],\n 'Population': ['45770',\n  '14777',\n  '147268',\n  '194706',\n  '40302',\n  '205056',\n  '325837',\n  '522452',\n  '138375',\n  '18808'],\n 'Latitude': ['56.39583',\n  '54.3499',\n  '56.462',\n  '51.88861',\n  '51.07',\n  '50.80583',\n  '53.683',\n  '53.792',\n  '54.047',\n  '53.228'],\n 'Longitude': ['-3.43333',\n  '-6.6546',\n  '-2.9707',\n  '0.90361',\n  '-1.79',\n  '-1.08722',\n  '-1.499',\n  '-1.754',\n  '-2.801',\n  '-4.128']}\n```\n:::\n:::\n\n\n::::\n\nYou should get something that starts:\n\n::: {#f6afa78e .cell execution_count=22}\n\n::: {.cell-output .cell-output-stdout}\n```\n{'City': ['Perth', 'Armagh', 'Dundee', 'Colchester', 'Salisbury', 'Portsmou...\n```\n:::\n:::\n\n\n## Adding Docstring\n\n::: {.callout-tip collapse=\"true\"}\n\n#### Difficulty: Low\n\n:::\n\nWe've assumed that the first row of our data set is always a _header_ (i.e. list of column names). If it's not then this code is going to have problems. A _robust_ function would allow us to specify column names, skip rows, etc. when we create the data structure, but let's not get caught up in that level of detail. Notice that I've also, for the first time:\n\n1. Used the docstring support offered by Python. You'll be able to use `help(...)` and get back the docstring help!\n2. Provided hints to Python about the expected input and output data types. This can help to ensure consistency and is also critical in testing / continuous integration when working with others on a codebase.\n\n::: {#0b248952 .cell execution_count=23}\n``` {.python .cell-code}\ndef read_csv(src:str) -> dict:\n    \"\"\"\n    Converts a CSV file to a dictionary-of-lists (dol),\n    using the first row to create column names.\n    \n    param src: a local CSV file\n    returns: a dictionary-of-lists\n    \"\"\"\n    csvdata = {} # An empty dictionary-of-lists\n    \n    with open(src, 'r') as f:\n        csvr = csv.reader(f)\n        \n        # Read in our column names and\n        # initialise the dictionary-of-lists\n        csvcols = next(csvr) \n        for c in csvcols:\n            csvdata[c] = []\n        \n        # Notice this code is still the same, \n        # we just used next(csvr) to get the \n        # header row first!\n        for r in csvr: \n            # Although you can often assume that the order \n            # of the keys is the same, Python doesn't \n            # guarantee it; this way we will always make\n            # the correct assignment.\n            for idx, c in enumerate(csvcols):\n                csvdata[c].append(r[idx])\n    \n    # Return dictionary of lists\n    return csvdata\n\nds = read_csv(src)\n```\n:::\n\n\n::: {#c423c49b .cell execution_count=24}\n``` {.python .cell-code}\nhelp(read_csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function read_csv in module __main__:\n\nread_csv(src: str) -> dict\n    Converts a CSV file to a dictionary-of-lists (dol),\n    using the first row to create column names.\n\n    param src: a local CSV file\n    returns: a dictionary-of-lists\n\n```\n:::\n:::\n\n\n::: {#a7e30f17 .cell execution_count=25}\n``` {.python .cell-code}\nprint(\"Columns are: \" + \", \".join(ds.keys()))\nprint(f\"First two cities are: {ds['City'][:2]}\")\nprint(f\"First two populations are: {ds['Population'][:2]}\")\nprint(f\"First two latitudes are: {ds['Latitude'][:2]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nColumns are: City, Population, Latitude, Longitude\nFirst two cities are: ['Perth', 'Armagh']\nFirst two populations are: ['45770', '14777']\nFirst two latitudes are: ['56.39583', '54.3499']\n```\n:::\n:::\n\n\n## Creating a Package\n\nWe're not going to tackle this now, but it's important that you understand how what we've done connects to what we're *about* to do, and the concept of a package is the bridge. We've already covered this in the pre-recorded lectures, but if you want to actually *try* to create your own package, the simplest way to do this is to:\n\n1. Copy the `read_csv` into a new file called, for instance, `utils.py`.\n2. Make sure you delete this function from the current 'namespace' (`del(read_csv)`) by which I mean that the `read_csv` function no longer exists (running `help(read_csv)` should give you an error!).\n3. Try importing the function from the file: `from utils import read_csv` and run the `help(read_csv)` code again.\n\nAssuming that you've done everything correctly, we've now brought in code from another file without having to write it into our main Python script file. In Python, many of the most complex libraries are spread across the equivalent of *many* `utils.py` files, but on top of *that* when we import and run them they are also creating objects from classes defined in those files. \n\nWhat we now want to do is use a fairly simple example using different 'shapes' (pyramids, cubes, etc.) that allow us to explore how classes work through inheritance from parents and can extend of overwrite the functionality provided by the parent class. We'll need this understanding in order to grasp how Pandas and GeoPandas work specifically, but also how Python works more generally.\n\n# Classes and Inheritance\n\nSo, in the immortal words of Monty Python... \n\n![And now for something completely different](./img/completely_different.png)\n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nThis will draw on what you've learned in the lectures about <a href=\"\">Methods</a>, <a href=\"\">Classes</a>, and <a href=\"\">Design</a>. You will also find the Code Camp [Classes](https://jreades.github.io/code-camp/lessons/Classes.html) session useful.\n\n:::\n\nTo repeat myself:\n\n> In Python, many of the most complex libraries are spread across the equivalent of *many* `utils.py` files, but on top of *that* when we import and run them they are also creating objects from classes defined in those files. \n>\n> What we now want to do is use a fairly simple example using different 'shapes' (pyramids, cubes, etc.) that allow us to explore how classes work through inheritance from parents and can extend of overwrite the functionality provided by the parent class. We'll need this understanding in order to grasp how Pandas and GeoPandas work specifically, but also how Python works more generally.\n\n::: {.callout-caution collapse=\"true\"}\n\n#### Difficulty: &#129327;.\n\n:::\n\nWe want to create a set of 'shapes' that allow us to calculate various properties of that shape:\n\n- Diameter: which we'll define as the longest line that can be drawn across the inside of the shape.\n- Volume: the total volume of the shape.\n- Surface Area: the total outside area of the shape.\n\nWe will create all of these shape classes in the notebook so that we know they work and then will move them to an external package file so that they can be imported and re-used easily in other notebooks.\n\nWe're also going to make use of a few features of Python:\n\n- You can access the class name of an instance using: `self.__class__.__name__`. And here's one key point: `self` refers to the specific instance (to *this* particular shape that I've created), not to the class in general (to *all* shapes of the same, er, shape)... we'll see why this matters.\n- You can raise your own exceptions easily if you don't want to implement a particular method yet. This is giving you control over how your code behaves when something goes 'wrong' -- as we've covered elsewhere sometimes an error is 'expected' and we want to handle the *exception*, other times it is 'unexpected' and we're going to let Python fail so that the user knows something is seriously wrong.\n- You can have an 'abstract' base class that does nothing except provide a template for the 'real' classes so that different types of shapes can be used interchangeably. This is quite an advanced feature, but it gives our script a lot more flexibility: we don't need to worry about whether we're working with a sphere, cube, or pyramid (or a spatial or non-spatial data set) because they are defined in a way that allows this flexibility.\n\n## Abstract Base Class\n\nThis class appears to do very little, but there are two things to notice:\n\n1. It provides a constructor (`__init__`) that sets the `shape_type` to the name of the class automatically (so a `square` object has `shape_type='Square'`) and it stores the critical dimension of the shape in `self.dim`.\n2. It provides methods (which only raise exceptions) that will allow one shape to be used in the place of any other shape that inherits from `shape`.\n\n::: {#4beec687 .cell execution_count=26}\n``` {.python .cell-code}\n# Base class shape\nclass shape(object): # Inherit from base class \n    def __init__(self, dimension:float=None):\n        self.shape_type = self.__class__.__name__.capitalize()\n        self.dim = dimension\n        return\n    \n    def diameter(self):\n        raise Exception(\"Unimplmented method error.\")\n    \n    def volume(self):\n        raise Exception(\"Unimplmented method error.\")\n    \n    def surface(self):\n        raise Exception(\"Unimplmented method error.\")\n        \n    def type(self):\n        return(self.shape_type)\n```\n:::\n\n\nWe can now create a new shape object (an *instance* of the shape class) but we can't do much that is useful with it:\n\n::: {#32d9ce7a .cell execution_count=27}\n``` {.python .cell-code}\ns = shape(15)\n\ntry: \n    print(f\"I am a {s.type()}\")\n    print(f\"My volume is {s.volume()}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am a Shape\nError: Unimplmented method error.\n```\n:::\n:::\n\n\n## Cube\n\nImplements a cube:\n\n1. The diameter of the cube is given by the Pythagorean formula for the length of the hypotenuse in 3D between opposing corners: $\\sqrt{d^{2} + d^{2} + d^{2}}$ which we can reduce to $\\sqrt{3 d^{2}}$.\n2. A cube's volume is given by $d^{3}$.\n3. A cube's surface area will be the sum of its six faces: $6d^{2}$.\n\n:::: {.qna}\n\n#### Question\n\nCan you work out the missing elements that will allow you to create a cube class?\n\n```python\n# Cube class\nclass cube(shape): # Inherit from shape \n    def __init__(self, dim:float):\n        super().__init__(dim)\n        return\n    \n    def diameter(self):\n        return (3 * self.??**2)**(1/2)\n    \n    def volume(self):\n        return self.dim**3\n    \n    def surface(self):\n        return ??*(self.dim**2)\n\n# If you've done everything correctly then\n# you will no longer get an error here...\ns = cube(15)\n\ntry: \n    print(f\"I am a {s.type()}\")\n    print(f\"My volume is {s.volume()}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n#### Answer\n\n::: {#6cd9d5bc .cell execution_count=28}\n``` {.python .cell-code}\n# Cube class\nclass cube(shape): # Inherit from shape\n    def __init__(self, dim:float):\n        super().__init__(dim)\n        return\n\n    def diameter(self):\n        return (3 * self.dim**2)**(1/2)\n\n    def volume(self):\n        return self.dim**3\n\n    def surface(self):\n        return 6*(self.dim**2)\n\n# If you've done everything correctly then\n# you will no longer get an error here...\ns = cube(15)\n\ntry: \n    print(f\"I am a {s.type()}\")\n    print(f\"My volume is {s.volume()}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am a Cube\nMy volume is 3375\n```\n:::\n:::\n\n\n::::\n\n## Sphere\n\nImplements a sphere:\n\n1. The diameter is twice the critical dimension (radius): $2r$. \n2. The volume is $\\frac{4}{3} \\pi r^{3}$.\n3. The surface area will be $4 \\pi r^{2}$.\n\nIf we were writing something more general, we'd probably have spheres as a special case of an ellipsoid!\n\n:::: {.qna}\n\n#### Question\n\nCan you work out the missing elements that will allow you to create a cube class?\n\n```python\n# Sphere class\nfrom math import pi\nclass sphere(shape): # Inherit from shape\n    def __init__(self, dim:float):\n        # Something...\n\n    def diameter(self):\n        # Something...\n\n    def volume(self):\n        # Something\n\n    def surface(self):\n        # Something\n\n# If you've done everything correctly then\n# you will no longer get an error here...\ns = sphere(15)\n\ntry: \n    print(f\"I am a {s.type()}\")\n    print(f\"My volume is {s.volume()}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n#### Answer\n\n::: {#a66ad2b2 .cell execution_count=29}\n``` {.python .cell-code}\nfrom math import pi\n# Sphere class\nclass sphere(shape): # Inherit from shape\n    def __init__(self, dim:float):\n        super().__init__(dim)\n        return\n\n    def diameter(self):\n        return self.dim*2\n\n    def volume(self):\n        return (4/3) * pi * self.dim**3\n\n    def surface(self):\n        return 4 * pi * (self.dim**2)\n\n# If you've done everything correctly then\n# you will no longer get an error here...\ns = sphere(15)\n\ntry: \n    print(f\"I am a {s.type()}\")\n    print(f\"My volume is {s.volume()}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am a Sphere\nMy volume is 14137.166941154068\n```\n:::\n:::\n\n\n::::\n\n## Regular Pyramid\n\nWe're taking this to be a regular pyramid where all sides are equal: \n\n1. The diameter is a line drawn across the base between opposing corners of the base so it's just $\\sqrt{d^{2} + d^{2}}$.\n2. The volume is given by $V = b * h / 3$ (where $b$ is the area of the base, which in this case becomes $d^{2} * h/3$).\n3. The surface area will be the base + 4 equilateral triangles: $d^{2} + 4 (d^{2}\\sqrt{3}/4)$ which we can reduce to $d^{2} + d^{2}\\sqrt{3}$\n\nBut this requires a _height_ method that is specific to pyramids:\n\n4. The height is taken from the centre of the pyramid (which will be half the length of the hypotenuse for two edges): $l = \\sqrt{d{^2} + d^{2}}$ and the long side ($d$ again) which gives us $\\sqrt{l/2 + d^{2}}$.\n\n::: {.callout-note}\n\n#### Class Variables\n\nNote that this has a **class variable** called `has_mummies` since Egyptian regular pyramids are plagued by them! This class variable is set automatically for *all* instances of the `pyramid` class. Changing this variable can have weird effects so they're not *often* changed.\n\n:::\n\n::: {#51fce285 .cell execution_count=30}\n``` {.python .cell-code}\n# Pyramid class\nclass pyramid(shape): # Inherit from shape\n\n    has_mummies = True # This is for *all* regular pyramids\n\n    def __init__(self, dim:float):\n        super().__init__(dim)\n        self.shape_type = 'Regular Pyramid'\n        return\n\n    def diameter(self):\n        return (self.dim**2 + self.dim**2)**(1/2)\n\n    def height(self):\n        return (self.diameter()/2 + self.dim**2)**(1/2)\n\n    def volume(self):\n        return self.dim**2 * self.height() / 3\n\n    def surface(self):\n        return self.dim**2 + self.dim**2 * 3**(1/2)\n```\n:::\n\n\n## Triangular Pyramid\n\nWe have chosen for triangular pyramid to *inherit* from regular pyramid. However, this is kind of a judgement call since there's very little shared between the two types of pyramid and it's arguable whether this one is actually simpler and should therefore be the parent class... \n\nJust to note, as well, that since all sides are equal this is an _equilateral_ triangular pyramid.  Anyway, the calculations are:\n\n1. The diameter (longest line through the shape) will just be the edge: $d$.\n2. The volume $V = b * h / 3$ where $b$ is the area of an equilateral triangle.\n3. The surface area will be $4b$ where $b$ is the area of an equilateral triangle.\n\nSo we now need two new formulas:\n\n5. The height of the pyramid using ([Pythagoras again](https://www.youtube.com/watch?v=ivF3ndmkMsE)): $h = \\sqrt{6}d/3$.\n6. The area of an equilateral triangle: $\\frac{\\sqrt{3}}{4} d^{2}$\n\nTriangular pyramids do *not* have a problem with mummies.\n\nWhy don't you add some documentation to this class and the regular pyramid class so that we know how to use them correctly?\n\n::: {#29689249 .cell execution_count=31}\n``` {.python .cell-code}\n# Triangular Pyramid class\nclass t_pyramid(pyramid): # Inherit from regular pyramid\n\n    has_mummies = False # This is for all triangular pyramids\n\n    def __init__(self, dim:float):\n        super().__init__(dim)\n        self.shape_type = 'Triangular Pyramid'\n        return\n\n    def diameter(self):\n        return self.dim\n\n    def height(self):\n        # h = sqrt(6)/3 * d\n        return 6**(1/2)/3 * self.dim\n\n    def base(self):\n        return 3**(1/2)/4 * self.dim**2\n\n    def volume(self):\n        return (1/3) * self.base() * self.height()\n\n    def surface(self):\n        return 4 * self.base()\n```\n:::\n\n\n## Testing Your Classes\n\nIf you've implemented everything correctly then the following code should run.\n\n```python\n# How would you test these changes?\ns = sphere(10)\nprint(s.type())\nprint(f\"\\tVolume is: {s.volume():5.2f}\")\nprint(f\"\\tDiameter is: {s.diameter():5.2f}\")\nprint(f\"\\tSurface Area is: {s.surface():5.2f}\")\nprint(\"\")\n\nc = cube(10)\nprint(c.type())\nprint(f\"\\tVolume is: {c.volume():5.2f}\")\nprint(f\"\\tDiameter is: {c.diameter():5.2f}\")\nprint(f\"\\tSurface Area is: {c.surface():5.2f}\")\nprint(\"\")\n\np = pyramid(10)\nprint(p.type())\nprint(f\"\\tVolume is: {p.volume():5.2f}\")\nprint(f\"\\tDiameter is: {p.diameter():5.2f}\")\nprint(f\"\\tSurface Area is: {p.surface():5.2f}\")\nprint(f\"\\tHeight is: {p.height():5.2f}\")\nif p.has_mummies is True:\n    print(\"\\tMummies? Aaaaaaaaargh!\")\nelse:\n    print(\"\\tPhew, no mummies!\")\nprint(\"\")\n\np2 = t_pyramid(10)\nprint(p2.type())\nprint(f\"\\tVolume is: {p2.volume():5.2f}\")\nprint(f\"\\tDiameter is: {p2.diameter():5.2f}\")\nprint(f\"\\tSurface Area is: {p2.surface():5.2f}\")\nprint(f\"\\tHeight is: {p2.height():5.2f}\")\nif p2.has_mummies is True:\n    print(\"\\tMummies? Aaaaaaaaargh!\")\nelse:\n    print(\"\\tPhew, no mummies!\")\nprint(\"\")\n\n# Useful demonstration of how to find out if a method or attribute is\n# associated with a particular object\nif hasattr(p2,'base_area'):\n    print(f\"Shape of type '{p2.type()}' has attribute or method 'base_area'\")\nelse:\n    print(f\"Shape of type '{p2.type()}' does *not* have attribute or method 'base_area'\")\nprint(\"\")\n```\n\nI get the following output:\n\n::: {#335cbcb5 .cell execution_count=32}\n\n::: {.cell-output .cell-output-stdout}\n```\nSphere\n\tVolume is: 4188.79\n\tDiameter is: 20.00\n\tSurface Area is: 1256.64\n\nCube\n\tVolume is: 1000.00\n\tDiameter is: 17.32\n\tSurface Area is: 600.00\n\nRegular Pyramid\n\tVolume is: 344.92\n\tDiameter is: 14.14\n\tSurface Area is: 273.21\n\tHeight is: 10.35\n\tMummies? Aaaaaaaaargh!\n\nTriangular Pyramid\n\tVolume is: 117.85\n\tDiameter is: 10.00\n\tSurface Area is: 173.21\n\tHeight is:  8.16\n\tPhew, no mummies!\n\nShape of type 'Triangular Pyramid' does *not* have attribute or method 'base_area'\n\n```\n:::\n:::\n\n\n## Packaging It Up\n\nWait, you're *still* working on this practical and haven't thrown up your hands in disgust yet? OK, in that case you can have *one* more thing to do: turn all the shapes into a package that can be loaded via an `import` statement. \n\n### Cell Magic\n\nThis code allows Jupyter to reload external libraries if they are edited after you import them. When you are working on your own packages this is rather useful since you tend to make a *lot* of mistakes when packaging code up this way and it's handy not to have to restart the entire notebook every time you fix a typo or change a function.\n\n```python\n%load_ext autoreload\n%autoreload 2\n```\n\n### Import Shapes\n\nMy suggestion is that you create a directory called `shapes` and copy all of the shape code (that's the code for `shape`, `cube`, `sphere`, `pyramid`, `tpyramid`) into a file called `__init__.py` inside the `shapes` directory. You should then able to run the following:\n\n```python\nfor s in ['shape','sphere','cube','pyramid','t_pyramid']:\n    if s in locals():\n        del(s)\nfrom shapes import *\n```\n\nWe need those first three lines of code to delete the existing classes from Python's 'memory' so that we can be sure we're importing the versions we saved to `shapes/__init__.py`.\n\n### Adding Documentation\n\nIn an ideal world, this would also be the time to properly document your classes and methods. Here as some examples that you could add to the `__init__.py` package file.\n\nUnderneath the line `class shape(object):`, add:\n\n```python\n    \"\"\"Abstract base class for all ideal shape classes.\n\n    Keyword arguments:\n    dimension -- the principle dimension of the shape (default None)\n    \"\"\"\n```\n\nUnderneath the line `def type(self):`, add:\n\n```python\n        \"\"\"\n        Returns the formatted name of the shape type. \n        \n        This is set automatically, but can be overwritten by setting the attribute shape_type.\n        \n        :returns: the name of the class, so shapes.cube is a `Cube` shape type\n        :rtype: str\n        \"\"\"\n```\n\nThis would then allow you to run:\n\n```python\nfrom shapes import * # <-- Change this if you didn't call your package `shapes`!\nhelp(shape)\nhelp(shape.type)\n```\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /Users/jreades/anaconda3/envs/sds/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.2\n---\n",
    "supporting": [
      "Practical-04-Objects_files"
    ],
    "filters": []
  }
}
{
  "hash": "901fe6c8e9037519957c80ef71a211d7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Practical 8: Selecting Data\"\nsubtitle: \"Selecting & Joining Data\"\njupyter: python3\nfilters:\n  - qna\n  - quarto\n---\n\n\n| Complete | Part 1: Foundations | Part 2: Data | Part 3: Analysis |     |\n| :------- | :------------------ | :----------- | :--------------- | --: |\n| 90% | &#9619;&#9619;&#9619;&#9619;&#9619;&#9619;&#9619;&#9619; | &#9619;&#9619;&#9619;&#9619;&#9619;&#9619; | &#9619;&#9619;&#9619;&#9617;&#9617;&#9617; | 8/10\n\n::: {.callout-warning}\n\n#### Important\n\nThis practical focusses on two key bits of _implementation_: visualisation and data linkage! You will have seen quite a bit of each of these across the preceding three to four weeks, but they were picked up in an _ad-hoc_ way, here we try to systematise things a bit.\n\n:::\n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nHere we're trying to tidy up the loose ends. You've already worked with basic data visualisations in Seaborn and Matplotlib (including (geo)panda's `plot` function), but we want you to have a better sense of how that _works_ as part of a coherent -- if altogether rather complex and overwhelming -- approach to managing a data visualisation. You've also already seen examples of joins and spatial joins before but, again, we just want to review them more formally now.\n\n:::\n\n# Preamble\n\n::: {#8927bca3 .cell execution_count=1}\n``` {.python .cell-code}\nhost = 'http://orca.casa.ucl.ac.uk'\npath = '~jreades/data'\nymd  = '2023-09-06'\n```\n:::\n\n\n::: {#eac1addf .cell execution_count=2}\n``` {.python .cell-code}\nimport os\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport seaborn as sns\n\nimport matplotlib.cm as cm\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {#31c10e4d .cell execution_count=3}\n``` {.python .cell-code}\nimport os\nfrom requests import get\nfrom urllib.parse import urlparse\n\ndef cache_data(src:str, dest:str) -> str:\n    \"\"\"Downloads and caches a remote file locally.\n    \n    The function sits between the 'read' step of a pandas or geopandas\n    data frame and downloading the file from a remote location. The idea\n    is that it will save it locally so that you don't need to remember to\n    do so yourself. Subsequent re-reads of the file will return instantly\n    rather than downloading the entire file for a second or n-th itme.\n    \n    Parameters\n    ----------\n    src : str\n        The remote *source* for the file, any valid URL should work.\n    dest : str\n        The *destination* location to save the downloaded file.\n        \n    Returns\n    -------\n    str\n        A string representing the local location of the file.\n    \"\"\"\n    \n    url = urlparse(src) # We assume that this is some kind of valid URL \n    fn  = os.path.split(url.path)[-1] # Extract the filename\n    dfn = os.path.join(dest,fn) # Destination filename\n    \n    # Check if dest+filename does *not* exist -- \n    # that would mean we have to download it!\n    if not os.path.isfile(dfn) or os.path.getsize(dfn) < 1:\n        \n        print(f\"{dfn} not found, downloading!\")\n\n        # Convert the path back into a list (without)\n        # the filename -- we need to check that directories\n        # exist first.\n        path = os.path.split(dest)\n        \n        # Create any missing directories in dest(ination) path\n        # -- os.path.join is the reverse of split (as you saw above)\n        # but it doesn't work with lists... so I had to google how\n        # to use the 'splat' operator! os.makedirs creates missing\n        # directories in a path automatically.\n        if len(path) >= 1 and path[0] != '':\n            os.makedirs(os.path.join(*path), exist_ok=True)\n            \n        # Download and write the file\n        with open(dfn, \"wb\") as file:\n            response = get(src)\n            file.write(response.content)\n            \n        print('Done downloading...')\n\n    else:\n        print(f\"Found {dfn} locally!\")\n\n    return dfn\n```\n:::\n\n\n::: {#9c668dcf .cell execution_count=4}\n``` {.python .cell-code}\nddir = os.path.join('data','geo') # destination directory\npqt  = cache_data(f'{host}/{path}/{ymd}-listings.geoparquet', ddir)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/geo/2023-09-06-listings.geoparquet locally!\n```\n:::\n:::\n\n\n# Selecting Data\n\n## In Pandas\n\n### Recap: A First Query\n\n::: {#70051dd7 .cell execution_count=5}\n``` {.python .cell-code}\npd.read_parquet(f'{pqt}').head(3) \n```\n\n::: {.cell-output .cell-output-display execution_count=246}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>last_scraped</th>\n      <th>name</th>\n      <th>description</th>\n      <th>host_id</th>\n      <th>host_name</th>\n      <th>host_since</th>\n      <th>host_location</th>\n      <th>host_is_superhost</th>\n      <th>host_listings_count</th>\n      <th>...</th>\n      <th>price</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n      <th>availability_365</th>\n      <th>number_of_reviews</th>\n      <th>first_review</th>\n      <th>last_review</th>\n      <th>review_scores_rating</th>\n      <th>reviews_per_month</th>\n      <th>geometry</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>92644</th>\n      <td>https://www.airbnb.com/rooms/92644</td>\n      <td>2023-09-06</td>\n      <td>Rental unit in Earlsfield · ★4.57 · 1 bedroom ...</td>\n      <td>&lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;Hi everyone! I have 2 ro...</td>\n      <td>498201</td>\n      <td>Dee Dee</td>\n      <td>2011-04-10</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>1</td>\n      <td>...</td>\n      <td>42.0</td>\n      <td>2</td>\n      <td>730</td>\n      <td>217</td>\n      <td>216</td>\n      <td>2011-06-21</td>\n      <td>2022-10-29</td>\n      <td>4.57</td>\n      <td>1.45</td>\n      <td>b'\\x01\\x01\\x00\\x00\\x00\\xeax\\xcc@e\\xfc\\xc7\\xbf\\...</td>\n    </tr>\n    <tr>\n      <th>93015</th>\n      <td>https://www.airbnb.com/rooms/93015</td>\n      <td>2023-09-06</td>\n      <td>Rental unit in Hammersmith · ★4.82 · 2 bedroom...</td>\n      <td>Gorgeous 2 bed ground floor apartment with per...</td>\n      <td>499704</td>\n      <td>Sarah</td>\n      <td>2011-04-11</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>1</td>\n      <td>...</td>\n      <td>175.0</td>\n      <td>5</td>\n      <td>240</td>\n      <td>40</td>\n      <td>38</td>\n      <td>2012-02-01</td>\n      <td>2022-09-30</td>\n      <td>4.82</td>\n      <td>0.27</td>\n      <td>b'\\x01\\x01\\x00\\x00\\x00\\r\\xabx#\\xf3\\xc8\\xcb\\xbf...</td>\n    </tr>\n    <tr>\n      <th>13913</th>\n      <td>https://www.airbnb.com/rooms/13913</td>\n      <td>2023-09-06</td>\n      <td>Rental unit in Islington · ★4.80 · 1 bedroom ·...</td>\n      <td>My bright double bedroom with a large window h...</td>\n      <td>54730</td>\n      <td>Alina</td>\n      <td>2009-11-16</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>3</td>\n      <td>...</td>\n      <td>79.0</td>\n      <td>1</td>\n      <td>29</td>\n      <td>360</td>\n      <td>41</td>\n      <td>2010-08-18</td>\n      <td>2022-12-11</td>\n      <td>4.80</td>\n      <td>0.26</td>\n      <td>b'\\x01\\x01\\x00\\x00\\x00\\xeeZB&gt;\\xe8\\xd9\\xbc\\xbf\\...</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 31 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis should (I hope) be trivial to read now: we are loading a parquet file using pandas and taking advantage of Python's 'chaining' functionality (`<object>.<method>().<method>()...`) to return the first three rows using `head`. It is worth noticing that we're not even bothering to save the result of this command to a data frame (thus the lack of a `df =` in the code) and We're doing this here solely so that you can compare pandas and SQL/DuckDB syntax across each of the following steps.\n\n### Recap: Selecting some columns\n\nTo load a columnar subset of the data we have two options:\n\n1. Load all the data and *then* subset (which always happens with CSV files but is optional with other formats)\n2. Load only the columns we care about (which is possible with parquet files)\n\nAnd in code these are:\n\n#### Load *then* filter\n\n::: {#b8cc78a4 .cell execution_count=6}\n``` {.python .cell-code}\n%%time\npd.read_parquet(f'{pqt}')[['listing_url', 'price', 'number_of_reviews', 'property_type', 'host_name']].head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 197 ms, sys: 29.1 ms, total: 226 ms\nWall time: 187 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=247}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>price</th>\n      <th>number_of_reviews</th>\n      <th>property_type</th>\n      <th>host_name</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>92644</th>\n      <td>https://www.airbnb.com/rooms/92644</td>\n      <td>42.0</td>\n      <td>216</td>\n      <td>Private room in rental unit</td>\n      <td>Dee Dee</td>\n    </tr>\n    <tr>\n      <th>93015</th>\n      <td>https://www.airbnb.com/rooms/93015</td>\n      <td>175.0</td>\n      <td>38</td>\n      <td>Entire rental unit</td>\n      <td>Sarah</td>\n    </tr>\n    <tr>\n      <th>13913</th>\n      <td>https://www.airbnb.com/rooms/13913</td>\n      <td>79.0</td>\n      <td>41</td>\n      <td>Private room in rental unit</td>\n      <td>Alina</td>\n    </tr>\n    <tr>\n      <th>15400</th>\n      <td>https://www.airbnb.com/rooms/15400</td>\n      <td>150.0</td>\n      <td>94</td>\n      <td>Entire rental unit</td>\n      <td>Philippa</td>\n    </tr>\n    <tr>\n      <th>93734</th>\n      <td>https://www.airbnb.com/rooms/93734</td>\n      <td>46.0</td>\n      <td>180</td>\n      <td>Private room in condo</td>\n      <td>William</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Filter *then* load\n\n::: {#edaaf206 .cell execution_count=7}\n``` {.python .cell-code}\n%%time\npd.read_parquet(f'{pqt}', columns=['listing_url', 'price', 'number_of_reviews', 'property_type', 'host_name']).head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 22 ms, sys: 3.65 ms, total: 25.7 ms\nWall time: 21.3 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=248}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>price</th>\n      <th>number_of_reviews</th>\n      <th>property_type</th>\n      <th>host_name</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>92644</th>\n      <td>https://www.airbnb.com/rooms/92644</td>\n      <td>42.0</td>\n      <td>216</td>\n      <td>Private room in rental unit</td>\n      <td>Dee Dee</td>\n    </tr>\n    <tr>\n      <th>93015</th>\n      <td>https://www.airbnb.com/rooms/93015</td>\n      <td>175.0</td>\n      <td>38</td>\n      <td>Entire rental unit</td>\n      <td>Sarah</td>\n    </tr>\n    <tr>\n      <th>13913</th>\n      <td>https://www.airbnb.com/rooms/13913</td>\n      <td>79.0</td>\n      <td>41</td>\n      <td>Private room in rental unit</td>\n      <td>Alina</td>\n    </tr>\n    <tr>\n      <th>15400</th>\n      <td>https://www.airbnb.com/rooms/15400</td>\n      <td>150.0</td>\n      <td>94</td>\n      <td>Entire rental unit</td>\n      <td>Philippa</td>\n    </tr>\n    <tr>\n      <th>93734</th>\n      <td>https://www.airbnb.com/rooms/93734</td>\n      <td>46.0</td>\n      <td>180</td>\n      <td>Private room in condo</td>\n      <td>William</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice the difference in time!!!\n\n### Recap: Adding a constraint\n\n::: {#2024ad72 .cell execution_count=8}\n``` {.python .cell-code}\ndf = pd.read_parquet(f'{pqt}', columns=['listing_url', 'price', 'number_of_reviews', 'property_type', 'host_name'])\ndf[(df.price < 250) & (df.number_of_reviews > 0) & (df.property_type=='Entire home/apt')].head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=249}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>price</th>\n      <th>number_of_reviews</th>\n      <th>property_type</th>\n      <th>host_name</th>\n    </tr>\n    <tr>\n      <th>id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>20296839</th>\n      <td>https://www.airbnb.com/rooms/20296839</td>\n      <td>96.0</td>\n      <td>7</td>\n      <td>Entire home/apt</td>\n      <td>Lira</td>\n    </tr>\n    <tr>\n      <th>20349067</th>\n      <td>https://www.airbnb.com/rooms/20349067</td>\n      <td>99.0</td>\n      <td>1</td>\n      <td>Entire home/apt</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>22959348</th>\n      <td>https://www.airbnb.com/rooms/22959348</td>\n      <td>100.0</td>\n      <td>3</td>\n      <td>Entire home/apt</td>\n      <td>Robert</td>\n    </tr>\n    <tr>\n      <th>42969992</th>\n      <td>https://www.airbnb.com/rooms/42969992</td>\n      <td>173.0</td>\n      <td>1</td>\n      <td>Entire home/apt</td>\n      <td>Duda</td>\n    </tr>\n    <tr>\n      <th>649784743352942848</th>\n      <td>https://www.airbnb.com/rooms/649784743352942906</td>\n      <td>91.0</td>\n      <td>9</td>\n      <td>Entire home/apt</td>\n      <td>Travelnest</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFor improved legibility you can also write this as:\n\n```python\ndf = pd.read_parquet(f'{pqt}', columns=['listing_url', 'price', 'number_of_reviews', 'last_review', 'host_name'])\ndf[\n    (df.price < 250) & \n    (df.number_of_reviews > 0) & \n    (df.property_type=='Entire home/apt')\n].head(5)\n```\n\nNotice here that we are using three conditions to filter the data *as well as* a column filter on loading to minimise the amount of data loaded into memory. Applying the filters simultaneously will also make it easy to see what you've done (you aren't applying each one separately) and to adjust the overall cleaning process. \n\nThis filter is fairly straightforward, but things get more complicated when you want to aggregate the return...\n\n### Aggregating the return\n\nThere is a *lot* to unpack here, and notice that it takes three steps to achieve our goal of selecting, grouping, aggregating, sorting, and printing out the ten most frequent combinations of room and property type.\n\n::: {#6ccd43e6 .cell execution_count=9}\n``` {.python .cell-code}\ndf = pd.read_parquet(f'{pqt}', columns=['property_type','room_type','number_of_reviews','price'])\ndf = df[\n    (df.price < 1050) & \n    (df.number_of_reviews > 0)\n]\ndf.groupby(\n        by=['room_type','property_type'],\n        observed=True\n    ).agg(\n        freq = (\"property_type\", \"count\"),\n        median_price = (\"price\", \"median\"),\n).reset_index().sort_values(\n        by=['freq','room_type','property_type'], ascending=[False,True,True]\n    ).head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=250}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>room_type</th>\n      <th>property_type</th>\n      <th>freq</th>\n      <th>median_price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18</th>\n      <td>Entire home/apt</td>\n      <td>Entire rental unit</td>\n      <td>24665</td>\n      <td>136.0</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>Private room</td>\n      <td>Private room in rental unit</td>\n      <td>9763</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>Private room</td>\n      <td>Private room in home</td>\n      <td>7800</td>\n      <td>49.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Entire home/apt</td>\n      <td>Entire condo</td>\n      <td>7543</td>\n      <td>156.0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Entire home/apt</td>\n      <td>Entire home</td>\n      <td>5243</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>Private room</td>\n      <td>Private room in condo</td>\n      <td>2883</td>\n      <td>67.0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Entire home/apt</td>\n      <td>Entire serviced apartment</td>\n      <td>1565</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>Private room</td>\n      <td>Private room in townhouse</td>\n      <td>1205</td>\n      <td>55.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Entire home/apt</td>\n      <td>Entire townhouse</td>\n      <td>967</td>\n      <td>235.0</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>Private room</td>\n      <td>Private room in bed and breakfast</td>\n      <td>412</td>\n      <td>78.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHopefully the first two steps are fairly clear, so let's focus on the final one:\n\n#### Group By\n\nThis is a *reasonably* intelligible step in which we group the data loaded by room and property:\n\n```python\ndfg = df.groupby(\n        by=['room_type','property_type'],\n        observed=True\n    )\ndfg\n```\n\nThe *order* here matters: `groupby(by=[<A>,<B>])` does not return the same result as `groupby(by=[<B>,<A>])`. Try it:\n\n```python\ndf.groupby(\n        by=['property_type','room_type'],\n        observed=True\n    )\n```\n\nThe other thing to note here is the `observed=True`. This is a nice bit of additional functionality that, if you set it to `False` will return a number for all possible combinations, inserting a zero if that combintaion is *not* observed in the data.\n\n#### Agg\n\nThe `agg` step aggregates the data specified in the functions:\n\n```python\ndfg.agg(\n        freq = (\"property_type\", \"count\"),\n        median_price = (\"price\", \"median\"),\n)\n```\n\nPandas offers a *lot* of different ways to do this, but the above approach is perhaps the most flexible since we are telling Pandas to apply the `count` function to the `property_type` field and assign it to a column called `freq`, and to apply the `median` function to the `price` field and assign that to a column called `median_price`.\n\n#### 'Degroup'\n\nIn order to work with the aggregated data you will *almost* always want to convert your `GroupedDataFrame` back to a regular `DataFrame` and that means resetting the index `reset_index()` -- this is just one of those things to learn about grouped data in Pandas.\n\n#### Sort\n\nFinally, to sort the *data* (which is usually what you want) you need to `sort_values`, where `by` specifies the fields you want to sort on and `ascending` is a matching (optional) list that specifies the sort order for each sort column. If you just want to sort everything in ascending order then you don't need to specify the `ascending` values, and if you wanted to sort *everything* in descending order then it's just `ascending=False`.\n\n## In SQL\n\nThat last example may have left you despairing of every being able to select/filter/aggregate/derive your data, but there *is* another way that is often far simpler *if* you are: a) willing to learn a different language, and b) willing to work with data in different formats. And that's all thanks to Parquet and DuckDB.\n\n### Parquet and DuckDB\n\nOne of the recent technical *revolutions* that has fundamentally reshaped my workflow is the combination of parquet files and in-memory databases. Parquet and Apache Arrow are [closely related](https://stackoverflow.com/a/56481636) but, in short, when you want to save large data sets in an easy-to-access format then Parquet should be your default choice. DuckDB gives you a way to treat Parquet files *as* a database **table** and run queries against it using standard SQL. You can [install DuckDB](https://duckdb.org/#quickinstall) on the command-line, but you can also query it from within Python using the appropriate module.\n\n### A First Query\n\nLet's see a quick demonstration:\n\n::: {#f98090e2 .cell execution_count=10}\n``` {.python .cell-code}\nimport duckdb as db\n\nquery = f'''\nSELECT *\nFROM read_parquet('{pqt}') \nLIMIT 3;\n'''\n\ndb.sql(query).to_df()\n```\n\n::: {.cell-output .cell-output-display execution_count=251}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>last_scraped</th>\n      <th>name</th>\n      <th>description</th>\n      <th>host_id</th>\n      <th>host_name</th>\n      <th>host_since</th>\n      <th>host_location</th>\n      <th>host_is_superhost</th>\n      <th>host_listings_count</th>\n      <th>...</th>\n      <th>minimum_nights</th>\n      <th>maximum_nights</th>\n      <th>availability_365</th>\n      <th>number_of_reviews</th>\n      <th>first_review</th>\n      <th>last_review</th>\n      <th>review_scores_rating</th>\n      <th>reviews_per_month</th>\n      <th>geometry</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>https://www.airbnb.com/rooms/92644</td>\n      <td>2023-09-06</td>\n      <td>Rental unit in Earlsfield · ★4.57 · 1 bedroom ...</td>\n      <td>&lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;Hi everyone! I have 2 ro...</td>\n      <td>498201</td>\n      <td>Dee Dee</td>\n      <td>2011-04-10</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>730</td>\n      <td>217</td>\n      <td>216</td>\n      <td>2011-06-21</td>\n      <td>2022-10-29</td>\n      <td>4.57</td>\n      <td>1.45</td>\n      <td>[1, 1, 0, 0, 0, 234, 120, 204, 64, 101, 252, 1...</td>\n      <td>92644</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>https://www.airbnb.com/rooms/93015</td>\n      <td>2023-09-06</td>\n      <td>Rental unit in Hammersmith · ★4.82 · 2 bedroom...</td>\n      <td>Gorgeous 2 bed ground floor apartment with per...</td>\n      <td>499704</td>\n      <td>Sarah</td>\n      <td>2011-04-11</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>1</td>\n      <td>...</td>\n      <td>5</td>\n      <td>240</td>\n      <td>40</td>\n      <td>38</td>\n      <td>2012-02-01</td>\n      <td>2022-09-30</td>\n      <td>4.82</td>\n      <td>0.27</td>\n      <td>[1, 1, 0, 0, 0, 13, 171, 120, 35, 243, 200, 20...</td>\n      <td>93015</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>https://www.airbnb.com/rooms/13913</td>\n      <td>2023-09-06</td>\n      <td>Rental unit in Islington · ★4.80 · 1 bedroom ·...</td>\n      <td>My bright double bedroom with a large window h...</td>\n      <td>54730</td>\n      <td>Alina</td>\n      <td>2009-11-16</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>3</td>\n      <td>...</td>\n      <td>1</td>\n      <td>29</td>\n      <td>360</td>\n      <td>41</td>\n      <td>2010-08-18</td>\n      <td>2022-12-11</td>\n      <td>4.80</td>\n      <td>0.26</td>\n      <td>[1, 1, 0, 0, 0, 238, 90, 66, 62, 232, 217, 188...</td>\n      <td>13913</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 32 columns</p>\n</div>\n```\n:::\n:::\n\n\nAnd now let's unpack this:\n\n1. We import the `duckdb` library as `db`.\n2. We set up a SQL `query` using a multi-line f-string\n3. We use DuckDb to execute the query and return a pandas dataframe (`df`)\n\nWhat's particularly elegant here (and quite different from trying to talk to a Postres or MySQL database) is that there's no connect-execute-collect pattern; we just build the query and execute it!\n\n### Deciphering SQL\n\n::: {.callout-note}\n\n#### I *do* declare...\n\nNow let's take a look at the SQL query... SQL is what's called a [declarative language](https://en.wikipedia.org/wiki/Declarative_programming), meaning that it is about the logic we want the program to follow rather than the 'flow' of execution. Python supports *some* declarative elements but is more commonly seen as an imperative language supporting procedural or functional approaches. This is a long way of saying: SQL won't look like Python even though we're executing SQL from *within* Python.\n\n:::\n\nSo our query (with added line numbers for clarity) looked liked this:\n\n```{.sql code-line-numbers=\"true\"}\nSELECT *\nFROM read_parquet('{pqt}') \nLIMIT 3\n```\n\nLine-by-line this means:\n\n1. Select all columns (`SELECT <* == everything>`)\n2. From the parquet file (`FROM <table location>`)\n3. Limit the return to 3 rows (`LIMIT <row count>`)\n\nLet's look at some variations...\n\n### Choosing some columns\n\n::: {#24638997 .cell execution_count=11}\n``` {.python .cell-code}\nquery = f'''\nSELECT listing_url, price, number_of_reviews, last_review, host_name \nFROM read_parquet('{pqt}') \nLIMIT 5;\n'''\n\ndb.sql(query).to_df()\n```\n\n::: {.cell-output .cell-output-display execution_count=252}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>price</th>\n      <th>number_of_reviews</th>\n      <th>last_review</th>\n      <th>host_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>https://www.airbnb.com/rooms/92644</td>\n      <td>42.0</td>\n      <td>216</td>\n      <td>2022-10-29</td>\n      <td>Dee Dee</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>https://www.airbnb.com/rooms/93015</td>\n      <td>175.0</td>\n      <td>38</td>\n      <td>2022-09-30</td>\n      <td>Sarah</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>https://www.airbnb.com/rooms/13913</td>\n      <td>79.0</td>\n      <td>41</td>\n      <td>2022-12-11</td>\n      <td>Alina</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>https://www.airbnb.com/rooms/15400</td>\n      <td>150.0</td>\n      <td>94</td>\n      <td>2023-05-01</td>\n      <td>Philippa</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>https://www.airbnb.com/rooms/93734</td>\n      <td>46.0</td>\n      <td>180</td>\n      <td>2023-09-02</td>\n      <td>William</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n```{.sql code-line-numbers=\"true\"}\nSELECT listing_url, price, number_of_reviews, last_review, host_name \nFROM read_parquet('{pqt}') \nLIMIT 5;\n```\n\nIt should be fairly easy to see how the query has changed from last time, but line-by-line this means:\n\n1. Select a set of columns from the table in the order specified (`SELECT <column 1>, <column 30>, <column 5>...`)\n2. From the parquet file (`FROM <table location>`)\n3. Limit the return to 5 rows (`LIMIT <row count>`)\n\n### Adding a constraint\n\n::: {#66e4e707 .cell execution_count=12}\n``` {.python .cell-code}\nquery = f'''\nSELECT listing_url, price, number_of_reviews, last_review, host_name \nFROM read_parquet('{pqt}') \nWHERE price < 250 \nAND number_of_reviews > 0\nAND property_type='Entire home/apt'\nLIMIT 5;\n'''\n\ndb.sql(query).to_df()\n```\n\n::: {.cell-output .cell-output-display execution_count=253}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_url</th>\n      <th>price</th>\n      <th>number_of_reviews</th>\n      <th>last_review</th>\n      <th>host_name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>https://www.airbnb.com/rooms/20296839</td>\n      <td>96.0</td>\n      <td>7</td>\n      <td>2017-10-01</td>\n      <td>Lira</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>https://www.airbnb.com/rooms/20349067</td>\n      <td>99.0</td>\n      <td>1</td>\n      <td>2017-11-12</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>https://www.airbnb.com/rooms/22959348</td>\n      <td>100.0</td>\n      <td>3</td>\n      <td>2018-02-04</td>\n      <td>Robert</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>https://www.airbnb.com/rooms/42969992</td>\n      <td>173.0</td>\n      <td>1</td>\n      <td>2021-10-24</td>\n      <td>Duda</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>https://www.airbnb.com/rooms/649784743352942906</td>\n      <td>91.0</td>\n      <td>9</td>\n      <td>2023-03-22</td>\n      <td>Travelnest</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn this query we've added *three* constraints using a `WHERE`, which is asking DuckDB to find all of the rows *where* the following things are true:\n\n4. The `price` must be less than ($)250/night\n5. The `number_of_reviews` must be more than 0\n6. The `property_type` must be `Entire home/apt`\n\n### Aggregating the return\n\nSo far, we've seen a few ways (and hopefully enough to get you started) to *select* data, but databases also 'excel' at aggregating data in various ways. We aren't going to get into things like windowing functions or stored procedures here, but even simple aggregates done in DuckDB can vastly improve on the performance of pandas.\n\n::: {.callout-tip}\n\nWhen you aggregate data you need to retrieve *every* column in the `SELECT` portion that you `GROUP BY` in the `WHERE` portion of the query. This will make sense when you see the examples below... (and should also make sense based on the Pandas equivalent above)\n\n:::\n\n::: {#12ab1dea .cell execution_count=13}\n``` {.python .cell-code}\nquery = f'''\nSELECT property_type, room_type, COUNT(*) AS frequency, MEDIAN(price) \nFROM read_parquet('{pqt}') \nWHERE price < 1000 \nAND number_of_reviews > 0\nGROUP BY room_type, property_type\nORDER BY frequency DESC, room_type, property_type\nLIMIT 10;\n'''\n\ndb.sql(query).to_df()\n```\n\n::: {.cell-output .cell-output-display execution_count=254}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>property_type</th>\n      <th>room_type</th>\n      <th>frequency</th>\n      <th>median(price)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Entire rental unit</td>\n      <td>Entire home/apt</td>\n      <td>24637</td>\n      <td>136.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Private room in rental unit</td>\n      <td>Private room</td>\n      <td>9754</td>\n      <td>52.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Private room in home</td>\n      <td>Private room</td>\n      <td>7797</td>\n      <td>49.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Entire condo</td>\n      <td>Entire home/apt</td>\n      <td>7533</td>\n      <td>155.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Entire home</td>\n      <td>Entire home/apt</td>\n      <td>5228</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Private room in condo</td>\n      <td>Private room</td>\n      <td>2880</td>\n      <td>67.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Entire serviced apartment</td>\n      <td>Entire home/apt</td>\n      <td>1565</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Private room in townhouse</td>\n      <td>Private room</td>\n      <td>1204</td>\n      <td>55.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Entire townhouse</td>\n      <td>Entire home/apt</td>\n      <td>964</td>\n      <td>234.5</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Private room in bed and breakfast</td>\n      <td>Private room</td>\n      <td>412</td>\n      <td>78.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are quite a few changes to the query here so it's worth reviewing them in more detail:\n\n```{.sql code-line-numbers=\"true\"}\nSELECT property_type, room_type, COUNT(*) AS frequency, MEDIAN(price) \nFROM read_parquet('{pqt}') \nWHERE price < 1000 \nAND number_of_reviews > 0\nGROUP BY room_type, property_type\nORDER BY frequency DESC, room_type, property_type\nLIMIT 10;\n```\n\nKey things to note:\n\n1. We have two new aggregate *functions*:\n   - `COUNT(*)` returns a count of the number of rows in each group specified in the `GROUP BY` clause.\n   - `MEDIAN(price)` returns, unsurprisingly, the median value of the `price` column for each group specified in the `GROUP BY` clause.\n   - *Note* also the `AS frequency` which 'renames' the column returned by the query; it's the same concept as the `import x as y` in Python.\n5. `GROUP BY` is where the aggregation happens, and here we're asking DuckDB to take all of the rows selected (`WHERE price < 1000 AND number_of_reviews > 0`) and group them using the `room_type` and `property_type` fields.\n6. `ORDER BY` orders the returned records by the columns we specify, and they can be either `ASC`ending (the default) or `DESC`ending (descending).\n\nWhat you should also be noting here is that:\n\n- This query returns *very* quickly compared to the pandas equivalent.\n- We have been able to express our selection, grouping, and organising criteria very succinctly.\n\nIn terms of both speed and intelligibility, there can be quite substantial advantages to moving *some* of your workflow into a database or a database-like format such as Parquet and then querying that from Python. Databases are *designed* for the kind of application that Pandas struggles with, and if you get to windowing functions and stored procedures you'll see how there are situations where something is far easier to express in Python/Pandas than in SQL. \n\nSo the trick here is to recognise when you are facing a problem that: a) will benefit from being expressed/tackled in a different language; and b) won't create undue overhead on your technology 'stack'. In working with environmental and built environment data I was able to cut the processing time by 80% when I moved the bulk of the data linkage work from Pandas into Parquet+DuckDB. *But*, by the same token, what's the point of using Postgres and managing a spatial database to perform a single step in a much longer workflow *unless* the performance considerations are so massive they outweigh any other issue. \n\n# Non-Spatial Joins {#sec-nonspatial}\n\nWe're going to look at joining data by attributes *first* and then look at spatial joins so that you get a sense of how they behave and differ.\n\nFor non-spatial joins we only need two data sets relating to MSOAs:\n\n::: {#192527dd .cell execution_count=14}\n``` {.python .cell-code}\nmsoa_names_url = 'https://houseofcommonslibrary.github.io/msoanames/MSOA-Names-1.20.csv'\nmsoa_popst_url = 'https://orca.casa.ucl.ac.uk/~jreades/data/sapemsoaquinaryagetablefinal.xlsx'\n\nmsoa_df = pd.read_excel(msoa_popst_url, sheet_name=\"Mid-2022 MSOA 2021\", header=3)\nmsoa_nms = pd.read_csv( cache_data(msoa_names_url, 'data') )\n\n# For DuckDB\nif not os.path.exists('data/MSOA_population_estimates.parquet'):\n    msoa_df.to_parquet('data/MSOA_population_estimates.parquet')\n\nprint(f\"msoa_df  has {msoa_df.shape[0]:,} rows and {msoa_df.shape[1]:,} columns.\")\nprint(f\"msoa_nms has {msoa_nms.shape[0]:,} rows and {msoa_nms.shape[1]:,} columns.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/MSOA-Names-1.20.csv locally!\nmsoa_df  has 7,264 rows and 43 columns.\nmsoa_nms has 7,201 rows and 6 columns.\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\n#### The preferred solution\n\nTo keep it simple: you should assume that non-spatial joins are *always* going to be faster than spatial ones, even in a performant spatial database. Asking if one number is less than another, or if a piece of text is found in another piece of text, is *much* simpler than asking if one object falls within the boundaries of another. Spatial databases are fast and very cool, but if you can express your problem non-spatially it will be faster to solve it that way too. \n\n:::\n\n## In Pandas\n\nPandas distinguishes between several types of what SQL would call a 'join': the process of linking two data sets. Depending on what you want to do, this will fall into one of the [merge, join, concatenate, or compare](https://pandas.pydata.org/docs/user_guide/merging.html) functions:\n\n- `concat` simply appends one data frame to another and won't be discussed further, but keep in mind that you can concatenate horizontally and vertically (across and down), and that having named indexes can cause consternation. You would find it most useful for appending columns to a data set (appending rows should be approached differently) or extending a data set for year $n$ with data from year $n+1$...\n- `merge` is what we normally want when we want to do something similar to a SQL join. You should refer back to the lecture for the differences between 'one-to-one', 'one-to-many', and 'many-to-many'. Note too that merging is a function of the pandas library and *not* a method of a data frame.\n\n### Joining by attribute\n\nSo in our case, to join the two MSOA data sets we're going to need to match the MSOA codes which have (slightly) different names in the two datasets:\n\n::: {#482b5bd3 .cell execution_count=15}\n``` {.python .cell-code}\n%%time\n\nrs = pd.merge(msoa_df, msoa_nms[['msoa11cd','msoa11hclnm','Laname']], left_on='MSOA 2021 Code', right_on='msoa11cd', how='left')\nprint(f\"Result set has {rs.shape[0]:,} rows and {rs.shape[1]:,} columns.\")\nrs.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResult set has 7,264 rows and 46 columns.\nCPU times: user 4.3 ms, sys: 1.35 ms, total: 5.65 ms\nWall time: 9.2 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=256}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LAD 2021 Code</th>\n      <th>LAD 2021 Name</th>\n      <th>MSOA 2021 Code</th>\n      <th>MSOA 2021 Name</th>\n      <th>Total</th>\n      <th>F0 to 4</th>\n      <th>F5 to 9</th>\n      <th>F10 to 14</th>\n      <th>F15 to 19</th>\n      <th>F20 to 24</th>\n      <th>...</th>\n      <th>M60 to 64</th>\n      <th>M65 to 69</th>\n      <th>M70 to 74</th>\n      <th>M75 to 79</th>\n      <th>M80 to 84</th>\n      <th>M85 to 89</th>\n      <th>M90 and over</th>\n      <th>msoa11cd</th>\n      <th>msoa11hclnm</th>\n      <th>Laname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E06000001</td>\n      <td>Hartlepool</td>\n      <td>E02002483</td>\n      <td>Hartlepool 001</td>\n      <td>10323</td>\n      <td>265</td>\n      <td>296</td>\n      <td>356</td>\n      <td>302</td>\n      <td>238</td>\n      <td>...</td>\n      <td>281</td>\n      <td>254</td>\n      <td>210</td>\n      <td>180</td>\n      <td>93</td>\n      <td>82</td>\n      <td>28</td>\n      <td>E02002483</td>\n      <td>Clavering</td>\n      <td>Hartlepool</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E06000001</td>\n      <td>Hartlepool</td>\n      <td>E02002484</td>\n      <td>Hartlepool 002</td>\n      <td>10460</td>\n      <td>325</td>\n      <td>349</td>\n      <td>295</td>\n      <td>340</td>\n      <td>283</td>\n      <td>...</td>\n      <td>363</td>\n      <td>276</td>\n      <td>248</td>\n      <td>175</td>\n      <td>86</td>\n      <td>49</td>\n      <td>28</td>\n      <td>E02002484</td>\n      <td>Headland &amp; West View</td>\n      <td>Hartlepool</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E06000001</td>\n      <td>Hartlepool</td>\n      <td>E02002485</td>\n      <td>Hartlepool 003</td>\n      <td>8040</td>\n      <td>238</td>\n      <td>287</td>\n      <td>295</td>\n      <td>262</td>\n      <td>225</td>\n      <td>...</td>\n      <td>272</td>\n      <td>198</td>\n      <td>159</td>\n      <td>143</td>\n      <td>61</td>\n      <td>31</td>\n      <td>12</td>\n      <td>E02002485</td>\n      <td>Jesmond</td>\n      <td>Hartlepool</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 46 columns</p>\n</div>\n```\n:::\n:::\n\n\n**But wait!** There's an issue lurking in the data!\n\n::: {#1e85dc17 .cell execution_count=16}\n``` {.python .cell-code}\nprint(f\"There are {rs.msoa11hclnm.isna().sum()} missing MSOA Names!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 184 missing MSOA Names!\n```\n:::\n:::\n\n\nCan you work out why this has happened? There is a clue in the column names!\n\nThere's no way to solve this problem except by changing the code to use [this URL instead](https://houseofcommonslibrary.github.io/msoanames/MSOA-Names-Latest2.csv) for the MSOA Names.\n\nWe can also try to constrain the result set to one LA thanks to data in the MSOA Names database:\n\n::: {#2d4ce284 .cell execution_count=17}\n``` {.python .cell-code}\n%%time \n\nla_nm = 'Waltham Forest'\nsdf   = msoa_nms[msoa_nms.Laname==la_nm][['msoa11cd','msoa11hclnm','Laname']].copy()\n\nrs = pd.merge(msoa_df, sdf, left_on='MSOA 2021 Code', right_on='msoa11cd', how='inner')\nprint(f\"Result set has {rs.shape[0]:,} rows and {rs.shape[1]:,} columns.\")\nrs.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResult set has 28 rows and 46 columns.\nCPU times: user 3.14 ms, sys: 499 µs, total: 3.63 ms\nWall time: 3.4 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=258}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LAD 2021 Code</th>\n      <th>LAD 2021 Name</th>\n      <th>MSOA 2021 Code</th>\n      <th>MSOA 2021 Name</th>\n      <th>Total</th>\n      <th>F0 to 4</th>\n      <th>F5 to 9</th>\n      <th>F10 to 14</th>\n      <th>F15 to 19</th>\n      <th>F20 to 24</th>\n      <th>...</th>\n      <th>M60 to 64</th>\n      <th>M65 to 69</th>\n      <th>M70 to 74</th>\n      <th>M75 to 79</th>\n      <th>M80 to 84</th>\n      <th>M85 to 89</th>\n      <th>M90 and over</th>\n      <th>msoa11cd</th>\n      <th>msoa11hclnm</th>\n      <th>Laname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000895</td>\n      <td>Waltham Forest 001</td>\n      <td>8363</td>\n      <td>208</td>\n      <td>233</td>\n      <td>250</td>\n      <td>228</td>\n      <td>215</td>\n      <td>...</td>\n      <td>242</td>\n      <td>209</td>\n      <td>153</td>\n      <td>194</td>\n      <td>137</td>\n      <td>93</td>\n      <td>45</td>\n      <td>E02000895</td>\n      <td>Chingford Green West</td>\n      <td>Waltham Forest</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000896</td>\n      <td>Waltham Forest 002</td>\n      <td>9322</td>\n      <td>256</td>\n      <td>278</td>\n      <td>264</td>\n      <td>230</td>\n      <td>241</td>\n      <td>...</td>\n      <td>257</td>\n      <td>218</td>\n      <td>216</td>\n      <td>190</td>\n      <td>111</td>\n      <td>111</td>\n      <td>54</td>\n      <td>E02000896</td>\n      <td>Chingford Green East</td>\n      <td>Waltham Forest</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000897</td>\n      <td>Waltham Forest 003</td>\n      <td>8438</td>\n      <td>233</td>\n      <td>262</td>\n      <td>276</td>\n      <td>212</td>\n      <td>209</td>\n      <td>...</td>\n      <td>205</td>\n      <td>162</td>\n      <td>136</td>\n      <td>98</td>\n      <td>104</td>\n      <td>87</td>\n      <td>24</td>\n      <td>E02000897</td>\n      <td>Friday Hill</td>\n      <td>Waltham Forest</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 46 columns</p>\n</div>\n```\n:::\n:::\n\n\nWithout the `how=inner`, the result set would still have all of the rows but some of the columns would be nearly completely empty. \n\n## In SQL\n\nSQL-based joins use very similar keywords (since Pandas is copying SQL), but how we put together the query is quite different.\n\n### Joining by attribute\n\n::: {#275fa9f2 .cell execution_count=18}\n``` {.python .cell-code}\n%%time\n\nquery = f'''\nSELECT * \nFROM \n    read_parquet('data/MSOA_population_estimates.parquet') as n \nLEFT JOIN \n    read_csv('{cache_data(msoa_names_url, 'data')}', header=true) as m\nON \n    n.\"MSOA 2021 Code\"=m.msoa11cd;\n'''\n\ndb.sql(query).to_df().head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/MSOA-Names-1.20.csv locally!\nCPU times: user 43.9 ms, sys: 5.19 ms, total: 49.1 ms\nWall time: 47.2 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=259}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LAD 2021 Code</th>\n      <th>LAD 2021 Name</th>\n      <th>MSOA 2021 Code</th>\n      <th>MSOA 2021 Name</th>\n      <th>Total</th>\n      <th>F0 to 4</th>\n      <th>F5 to 9</th>\n      <th>F10 to 14</th>\n      <th>F15 to 19</th>\n      <th>F20 to 24</th>\n      <th>...</th>\n      <th>M75 to 79</th>\n      <th>M80 to 84</th>\n      <th>M85 to 89</th>\n      <th>M90 and over</th>\n      <th>msoa11cd</th>\n      <th>msoa11nm</th>\n      <th>msoa11nmw</th>\n      <th>msoa11hclnm</th>\n      <th>msoa11hclnmw</th>\n      <th>Laname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E09000001</td>\n      <td>City of London</td>\n      <td>E02000001</td>\n      <td>City of London 001</td>\n      <td>10847</td>\n      <td>105</td>\n      <td>78</td>\n      <td>69</td>\n      <td>191</td>\n      <td>699</td>\n      <td>...</td>\n      <td>143</td>\n      <td>86</td>\n      <td>36</td>\n      <td>22</td>\n      <td>E02000001</td>\n      <td>City of London 001</td>\n      <td>City of London 001</td>\n      <td>City of London</td>\n      <td>None</td>\n      <td>City of London</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E09000002</td>\n      <td>Barking and Dagenham</td>\n      <td>E02000002</td>\n      <td>Barking and Dagenham 001</td>\n      <td>8384</td>\n      <td>350</td>\n      <td>346</td>\n      <td>392</td>\n      <td>322</td>\n      <td>211</td>\n      <td>...</td>\n      <td>108</td>\n      <td>71</td>\n      <td>29</td>\n      <td>29</td>\n      <td>E02000002</td>\n      <td>Barking and Dagenham 001</td>\n      <td>Barking and Dagenham 001</td>\n      <td>Marks Gate</td>\n      <td>None</td>\n      <td>Barking and Dagenham</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E09000002</td>\n      <td>Barking and Dagenham</td>\n      <td>E02000003</td>\n      <td>Barking and Dagenham 002</td>\n      <td>11803</td>\n      <td>494</td>\n      <td>431</td>\n      <td>359</td>\n      <td>330</td>\n      <td>372</td>\n      <td>...</td>\n      <td>125</td>\n      <td>91</td>\n      <td>40</td>\n      <td>19</td>\n      <td>E02000003</td>\n      <td>Barking and Dagenham 002</td>\n      <td>Barking and Dagenham 002</td>\n      <td>Chadwell Heath East</td>\n      <td>None</td>\n      <td>Barking and Dagenham</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 49 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\n#### Slower???\n\n*Without* the data caching function, the query above may *appear* slower than the Pandas one but if you look at the timing information you'll see that the actual time spent processing the data was less. How can that be? Notice that above we're reading the CSV file from the House of Commons library as *part* of the join, so most of that delay is spent waiting for the CSV file to download!\n\nThat's why I prefer to download a file *once* and save it locally rather than downloading the same file again and again. Plus it's friendlier (and cheaper!) to the person or organisation providing the data to you.\n\n:::\n\nLet's take a look at the SQL:\n\n```{.sql code-line-numbers=\"true\"}\nSELECT * \nFROM \n    read_parquet('data/MSOA_population_estimates.parquet') as n \nLEFT JOIN \n    read_csv(msoa_names_url, header=true) as m\nON \n    n.\"MSOA 2021 Code\"=m.msoa11cd;\n```\n\nLine-by-line:\n\n1. `SELECT` every column (this is the `*`, change this if you want to only pull a subset of columns)\n2. `FROM` the following tables (it doesn't really matter if the tables are on this line or the next for legibility)\n3. `<table 1 from parquet> as n` (we now refer to the data from this table using the prefix `n.`; e.g. `n.Total`)\n4. `LEFT JOIN` is the SQL way of saying to keep all of the rows in the first table (`n`, which is the first, and therefore 'left' table)\n5. `<table 2 from csv> as m` (we now refer to the data from this table using the prefix `m.`; e.g. `m.geometry`)\n6. `ON <left table matching column> = <right table matching column>` (here, the unusual thin is the double-quotes around the column name required to deal with the fact that the label contains spaces).\n\n*Notice* how there are parallels between even quite different languages here: if you have spaces or special characters or whatever in your column name then you're going to need to handle that a little differently, and if you have two tables to join you have a left (aka first) one and a right (aka second) one and the order matters.\n\nNow, running the same query to get the Waltham Forest data can be done two ways:\n\n::: {#e843b91b .cell execution_count=19}\n``` {.python .cell-code}\n%%time\n\nboro = 'Waltham Forest'\nquery = f'''\nSELECT * \nFROM \n    read_parquet('data/MSOA_population_estimates.parquet') as n \nINNER JOIN \n    read_csv('{cache_data(msoa_names_url, 'data')}', header=true) as m\nON \n    n.\"MSOA 2021 Code\"=m.msoa11cd\nWHERE \n    m.Laname='{boro}';\n'''\n\ndb.sql(query).to_df().head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/MSOA-Names-1.20.csv locally!\nCPU times: user 32.1 ms, sys: 3.08 ms, total: 35.2 ms\nWall time: 36 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=260}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LAD 2021 Code</th>\n      <th>LAD 2021 Name</th>\n      <th>MSOA 2021 Code</th>\n      <th>MSOA 2021 Name</th>\n      <th>Total</th>\n      <th>F0 to 4</th>\n      <th>F5 to 9</th>\n      <th>F10 to 14</th>\n      <th>F15 to 19</th>\n      <th>F20 to 24</th>\n      <th>...</th>\n      <th>M75 to 79</th>\n      <th>M80 to 84</th>\n      <th>M85 to 89</th>\n      <th>M90 and over</th>\n      <th>msoa11cd</th>\n      <th>msoa11nm</th>\n      <th>msoa11nmw</th>\n      <th>msoa11hclnm</th>\n      <th>msoa11hclnmw</th>\n      <th>Laname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000895</td>\n      <td>Waltham Forest 001</td>\n      <td>8363</td>\n      <td>208</td>\n      <td>233</td>\n      <td>250</td>\n      <td>228</td>\n      <td>215</td>\n      <td>...</td>\n      <td>194</td>\n      <td>137</td>\n      <td>93</td>\n      <td>45</td>\n      <td>E02000895</td>\n      <td>Waltham Forest 001</td>\n      <td>Waltham Forest 001</td>\n      <td>Chingford Green West</td>\n      <td>None</td>\n      <td>Waltham Forest</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000896</td>\n      <td>Waltham Forest 002</td>\n      <td>9322</td>\n      <td>256</td>\n      <td>278</td>\n      <td>264</td>\n      <td>230</td>\n      <td>241</td>\n      <td>...</td>\n      <td>190</td>\n      <td>111</td>\n      <td>111</td>\n      <td>54</td>\n      <td>E02000896</td>\n      <td>Waltham Forest 002</td>\n      <td>Waltham Forest 002</td>\n      <td>Chingford Green East</td>\n      <td>None</td>\n      <td>Waltham Forest</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000897</td>\n      <td>Waltham Forest 003</td>\n      <td>8438</td>\n      <td>233</td>\n      <td>262</td>\n      <td>276</td>\n      <td>212</td>\n      <td>209</td>\n      <td>...</td>\n      <td>98</td>\n      <td>104</td>\n      <td>87</td>\n      <td>24</td>\n      <td>E02000897</td>\n      <td>Waltham Forest 003</td>\n      <td>Waltham Forest 003</td>\n      <td>Friday Hill</td>\n      <td>None</td>\n      <td>Waltham Forest</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 49 columns</p>\n</div>\n```\n:::\n:::\n\n\nEverything here is *basically* the same except for:\n\n1. We changed the `LEFT JOIN` to an `INNER JOIN` -- this should make sense to you if you've watched the lectures.\n2. We added a `WHERE m.Laname=<borough name>` which restricts the match to only those rows where the Local Authority name is Waltham Forest.\n\n*However*, note that this query can *also* be written this way: \n\n::: {#971ead40 .cell execution_count=20}\n``` {.python .cell-code}\n%%time\n\nboro = 'Waltham Forest'\nquery = f'''\nSELECT * \nFROM \n    read_parquet('data/MSOA_population_estimates.parquet') as n, \n    read_csv('{cache_data(msoa_names_url, 'data')}', header=true) as m\nWHERE m.Laname='{boro}'\nAND n.\"MSOA 2021 Code\"=m.msoa11cd;\n'''\n\ndb.sql(query).to_df().head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/MSOA-Names-1.20.csv locally!\nCPU times: user 32.2 ms, sys: 3.37 ms, total: 35.5 ms\nWall time: 35.7 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=261}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LAD 2021 Code</th>\n      <th>LAD 2021 Name</th>\n      <th>MSOA 2021 Code</th>\n      <th>MSOA 2021 Name</th>\n      <th>Total</th>\n      <th>F0 to 4</th>\n      <th>F5 to 9</th>\n      <th>F10 to 14</th>\n      <th>F15 to 19</th>\n      <th>F20 to 24</th>\n      <th>...</th>\n      <th>M75 to 79</th>\n      <th>M80 to 84</th>\n      <th>M85 to 89</th>\n      <th>M90 and over</th>\n      <th>msoa11cd</th>\n      <th>msoa11nm</th>\n      <th>msoa11nmw</th>\n      <th>msoa11hclnm</th>\n      <th>msoa11hclnmw</th>\n      <th>Laname</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000895</td>\n      <td>Waltham Forest 001</td>\n      <td>8363</td>\n      <td>208</td>\n      <td>233</td>\n      <td>250</td>\n      <td>228</td>\n      <td>215</td>\n      <td>...</td>\n      <td>194</td>\n      <td>137</td>\n      <td>93</td>\n      <td>45</td>\n      <td>E02000895</td>\n      <td>Waltham Forest 001</td>\n      <td>Waltham Forest 001</td>\n      <td>Chingford Green West</td>\n      <td>None</td>\n      <td>Waltham Forest</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000896</td>\n      <td>Waltham Forest 002</td>\n      <td>9322</td>\n      <td>256</td>\n      <td>278</td>\n      <td>264</td>\n      <td>230</td>\n      <td>241</td>\n      <td>...</td>\n      <td>190</td>\n      <td>111</td>\n      <td>111</td>\n      <td>54</td>\n      <td>E02000896</td>\n      <td>Waltham Forest 002</td>\n      <td>Waltham Forest 002</td>\n      <td>Chingford Green East</td>\n      <td>None</td>\n      <td>Waltham Forest</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E02000897</td>\n      <td>Waltham Forest 003</td>\n      <td>8438</td>\n      <td>233</td>\n      <td>262</td>\n      <td>276</td>\n      <td>212</td>\n      <td>209</td>\n      <td>...</td>\n      <td>98</td>\n      <td>104</td>\n      <td>87</td>\n      <td>24</td>\n      <td>E02000897</td>\n      <td>Waltham Forest 003</td>\n      <td>Waltham Forest 003</td>\n      <td>Friday Hill</td>\n      <td>None</td>\n      <td>Waltham Forest</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 49 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe second way is a little easier to read, but it *only* allows you to do **inner joins** where attributes need to match in both tables for a row to be kept. This situation is such a common 'use case' that it makes sense to have this simpler syntax, but the previous code will work for inner, left, right, and outer joins.\n\n# Spatial Joins {#sec-spatial}\n\n::: {.callout-tip}\n\n#### Spatial DuckDB\n\nDuckDB also now supports spatial queries via the [`SPATIAL` extension](https://duckdb.org/docs/extensions/spatial.html). Performance is *not* that of a tuned Postgres+PostGIS database, but the overhead of *creating* such a tuned database often exceeds the benefit for ad-hoc querying. Basically, Postgres+PostGIS is great if you're a company such as Booking.com, Airbnb, or OpenStreetMap, but it's most likely overkill for offline read-oriented applications.\n\n:::\n\n## Why obvious is not always right (Part 432)\n\nBuilding on what I said above in @sec-nonspatial, even where you *do* have a spatial challenge, it can be worth it to convert it to a non-spatial solution to improve the overall performance of your code. For instance, say you have data from LSOAs and want to be able to aggregate it up to MSOAs and Boroughs to perform various analyses. \n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n\n#### LSOA Table\n\n| LSOA Code | Polygon     |\n|----------:|------------:|\n| LSOA1     | WKT(...)    |\n| LSOA2     | WKT(...)    |\n| LSOA3     | WKT(...)    |\n:::\n\n::: {.column width=\"5%\"}\n\n:::\n\n::: {.column width=\"30%\"}\n\n#### MSOA Table\n\n| MSOA Code | Polygon     |\n|----------:|------------:|\n| MSOA1     | WKT(...)    |\n| MSOA2     | WKT(...)    |\n| MSOA3     | WKT(...)    |\n:::\n\n::: {.column width=\"5%\"}\n\n:::\n\n::: {.column width=\"30%\"}\n\n#### Borough Table\n\n| Borough Code | Polygon     |\n|----------:|------------:|\n| BORO1     | WKT(...)    |\n| BORO2     | WKT(...)    |\n| BORO3     | WKT(...)    |\n:::\n\n::::\n\nThe *obvious* way to do this is as a spatial join: `select all LSOAs within an MSOA and aggregate them`. And you would then run this same query for every dimension you want to aggregate. **This is *not* the right way to tackle this problem** even though you can write the query to give you the correct answer.\n\nThe *right* way when you are going to repeatedly run an expensive spatial query is to work out if you can 'cache' the result to save time in the future. In this case the answer is to create a 'lookup table' which uses the LSOA and MSOA and Borough codes to tell you if a LSOA falls inside a borough or MSOA. You perform the hard spatial query *just once* to create the lookup table, and thereafter you are using a fast non-spatial query.\n\nIn this case your lookup table will be this...\n\n#### Lookup Table\n\n| LSOA Code | MSOA Code | Borough Code |\n|----------:|----------:|-------------:|\n| LSOA1     | MSOA1     | BORO1        |\n| LSOA2     | MSOA1     | BORO1        |\n| LSOA3     | MSOA2     | BORO1        |\n\nNow you can do any kind of *spatial aggregation* you want without having to incur the costs of running a *spatial query* using something like:\n\n```{.sql code-line-numbers=\"true\"}\nSELECT m.\"MSOA Code\", SUM(<attribute>) as feature_sum, COUNT(<attribute 2>) as feature_count  \nFROM <lsoa data table> as l, <lookup table> as lkp  \nWHERE l.\"LSOA Code\" = lkp.\"LSOA Code\" \nGROUP BY lkp.\"MSOA Code\";\n```\n\nSee, no need for a spatial query and you can run the same query easily for many features. You can also use this as a foundation for creating a `VIEW` or a `MATERIALIZED VIEW`, but that's an advanced topic for managing your data more efficiently in an operational environment rather than a research-oriented one.\n\nBut first, we need some actual geodata to work with:\n\n::: {#155d4a34 .cell execution_count=21}\n``` {.python .cell-code}\nmsoa_gpkg = gpd.read_file( cache_data(f'{host}/{path}/MSOA-2011.gpkg', ddir) ).to_crs('epsg:27700')\nlistings  = gpd.read_parquet( cache_data(f'{host}/{path}/{ymd}-listings.geoparquet', ddir) ).to_crs('epsg:27700')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/geo/MSOA-2011.gpkg locally!\nFound data/geo/2023-09-06-listings.geoparquet locally!\n```\n:::\n:::\n\n\n## In Geopandas\n\nLet's try to find all of the listings that fall within the borough of Waltham Forest, so that implies two steps:\n\n1. Subset the MSOA geo-data so that it only includes the Waltham Forest MSOAs.\n2. Run a spatial query to find the listings that are within those MSOAs (we could, optionally, `union` the MSOAs to get the outline of the borough)\n\n::: {#1507de7b .cell execution_count=22}\n``` {.python .cell-code}\nboro = 'Waltham Forest'\nboro_gdf = msoa_gpkg[msoa_gpkg.LAD11NM==boro].copy()\n\n# Do the spatial join\nboro_listings = gpd.sjoin(listings, boro_gdf, predicate='within', rsuffix='_r')\n\n# Layer the plots\nf, ax = plt.subplots(1,1,figsize=(8,5))\nboro_gdf.plot(color=\"white\", edgecolor=\"black\", linewidth=0.5, ax=ax)\nboro_listings.plot(column='price', cmap='viridis', legend=True, s=1.5, aspect=1, ax=ax)\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-23-output-1.png){width=375 height=411}\n:::\n:::\n\n\n::: {.callout-warning}\n\nIf you get `ValueError: aspect must be finite and positive` when you try to make a plot (this seems fairly common with GeoPackages (`.gpkg` files) then you will need to specify `aspect=1` in the `plot(...)` command.\n\n:::\n\n## In SQL\n\nAfter quite a bit of faff my conclusion is that, while you *can* do spatial queries in DuckDB it is a lot of work and *probably* not worth the effort *at this time*. The 'issue' is that spatial support (as well as Excel supprt) is provided via the `GDAL` framework and this takes quite a different approach. After working it out, spatial queries do work *fairly* well if you do them *entirely* within DuckDB (reading, merging, and writing the data) and then load the results in a separate step using GeoPandas; however, you *cannot* get a GeoDataFrame back via `db.query(<query>).to_df()` since that only returns a Pandas data frame and the geometry column is unreadable. In addition, geoparquet support seems limited while GeoPackage performance is *poor*, so you're basically losing all the advantages of a parquet-based workflow.\n\nSo the examples below are provided for reference only and, on the whole, right now I'd recommend using GeoPandas and geoparquet files directly.\n\n::: {#684b8552 .cell execution_count=23}\n``` {.python .cell-code}\n%%time\n\nboro = 'Waltham Forest'\n\nquery = f'''\nLOAD SPATIAL;\nCOPY(\n  SELECT m.MSOA11CD, n.msoa11nm, n.Laname, m.geom \n  FROM \n      (SELECT MSOA11CD, geom FROM ST_Read(\"{cache_data(f'{host}/{path}/MSOA-2011.gpkg', ddir)}\")) AS m,\n      read_csv(\"{cache_data(msoa_names_url, 'data')}\") AS n\n  WHERE m.MSOA11CD=n.msoa11cd\n  AND n.Laname='{boro}'\n) TO 'data/geo/merged.gpkg' WITH (FORMAT GDAL, DRIVER 'GPKG', LAYER_CREATION_OPTIONS 'WRITE_BBOX=YES');\n'''\n\ndb.sql(query)\nrs = gpd.read_file('data/geo/merged.gpkg')\nprint(f\"Result set has {rs.shape[0]:,} rows and {rs.shape[1]:,} columns.\")\nrs.head(5)\nrs.plot(aspect=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/geo/MSOA-2011.gpkg locally!\nFound data/MSOA-Names-1.20.csv locally!\nResult set has 28 rows and 4 columns.\nCPU times: user 72.3 ms, sys: 15.9 ms, total: 88.3 ms\nWall time: 85 ms\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-24-output-2.png){width=291 height=411}\n:::\n:::\n\n\n# Worked Example\n\nWith that background material, let's now work through a practical example.\n\n## Load Geodata\n\nA lot of useful geo-data can be accessed from the [GeoPortal](https://geoportal.statistics.gov.uk/). And see also [my discussion](https://jreades.github.io/fsds/sessions/week8.html) on [lookup tables](https://geoportal.statistics.gov.uk/datasets/postcode-to-output-area-to-lower-layer-super-output-area-to-middle-layer-super-output-area-to-local-authority-district-november-2018-lookup-in-the-uk-2/about).\n\n::: {#52deced5 .cell execution_count=24}\n``` {.python .cell-code}\nspath = 'https://github.com/jreades/fsds/blob/master/data/src/' # source path\nwater = gpd.read_file( cache_data(spath+'Water.gpkg?raw=true', ddir) )\nboros = gpd.read_file( cache_data(spath+'Boroughs.gpkg?raw=true', ddir) )\ngreen = gpd.read_file( cache_data(spath+'Greenspace.gpkg?raw=true', ddir) )\nmsoas = gpd.read_file( cache_data(f'{host}/{path}/MSOA-2011.gpkg', ddir) ).to_crs('epsg:27700')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/geo/Water.gpkg locally!\nFound data/geo/Boroughs.gpkg locally!\nFound data/geo/Greenspace.gpkg locally!\nFound data/geo/MSOA-2011.gpkg locally!\n```\n:::\n:::\n\n\n## Select London MSOAs\n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nOne thing to remember here is that computers are _exact_. So if you say that the selection should only be of MSOAs _within_ London then you actually need to think about whether a shared border qualifies as 'within'. Watch [the lectures](https://jreades.github.io/fsds/sessions/week10.html#lectures) again if you're unsure, but that's why here we take this slightly clunk approach of buffering the London boundary _before_ doing the selection.\n\n:::\n\n### Union\n\nAs we don't have a boundary file for London, we can *generate* use using the `unary_union` operator (as we do here) or using the [dissolve()](https://geopandas.org/en/stable/docs/user_guide/aggregation_with_dissolve.html) approach. Consider the pros and cons of each approach in terms of performance, output format, and leigibility. \n\nSo here's approach 1, which is a method call returning a GeoDataFrame (which is why we can call `plot`):\n\n::: {#4b7b77b4 .cell execution_count=25}\n``` {.python .cell-code}\nboros.dissolve().plot();\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-26-output-1.png){width=558 height=411}\n:::\n:::\n\n\nAnd here's approach 2, which is an *attribute* and returns a raw polygon (so no reason to call `plot`, but it's come back without the rest of the data frame!):\n\n::: {#a1de54a2 .cell execution_count=26}\n``` {.python .cell-code}\nboros.unary_union\n```\n\n::: {.cell-output .cell-output-display execution_count=267}\n![](Practical-08-Selecting_Data_files/figure-html/cell-27-output-1.svg){}\n:::\n:::\n\n\n::: {.callout-note}\n\n#### &#128279; Connections\n\nNotice how we're also demonstrating some additional ways of plotting 'on the fly' (without generating a data frame) as well as (below) showing you how to zoom in/out.\n\n:::\n\n::: {#3365e35e .cell execution_count=27}\n``` {.python .cell-code}\nldn = gpd.GeoDataFrame(gpd.GeoSeries(data=boros.unary_union)).rename(columns={0:'geometry'}).set_geometry(\"geometry\")\nldn = ldn.set_crs(epsg=27700)\nax  = ldn.plot(facecolor=(.5, .5, .9, .5))\nmsoas.plot(ax=ax, facecolor='none', edgecolor=(.6, .6, .6, .6))\nax.set_xlim(500000, 515000)\nax.set_ylim(180000, 195000);\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-28-output-1.png){width=450 height=411}\n:::\n:::\n\n\n### A (Bad) First Join\n\n::: {#1628c72b .cell execution_count=28}\n``` {.python .cell-code}\nldn_msoas = gpd.sjoin(msoas, ldn, predicate='within', how='inner')\nax = ldn.plot(facecolor=(.5, .5, .9, .5))\nldn_msoas.plot(ax=ax, facecolor='none', edgecolor=(.8, .4, .4), linewidth=0.75)\nax.set_xlim(500000, 515000)\nax.set_ylim(180000, 195000);\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-29-output-1.png){width=450 height=411}\n:::\n:::\n\n\n::: {.callout-caution}\n\n#### What has gone wrong???\n\nBefore you move on to the solution, stop and actually *think* about what this hasn't done what you would have expected? THis is another reason that you need to pay attention to the differences between spatial and non-spatial joins.\n\n:::\n\n### Buffer and Join\n\nIn order to ensure that we get all the MSOAs _within_ London we need to buffer the boundary by some amount to ensure that `within` returns what we want. If _cover_ were easier to use then that option might be preferable.\n\n:::: {.qna}\n\n#### Question\n\n```python\nldn['buffered'] = ldn.geometry.???(???)\nldn = ldn.set_geometry('buffered').set_crs(epsg=27700)\nax  = ldn.plot(facecolor=(.5, .5, .9, .5))\nmsoas.plot(ax=ax, facecolor='none', edgecolor=(.6, .6, .6, .6))\nax.set_xlim(500000, 515000)\nax.set_ylim(180000, 195000);\n```\n\n#### Answer\n\n::: {#6f20367e .cell execution_count=29}\n``` {.python .cell-code}\nldn['buffered'] = ldn.geometry.buffer(250)\nldn = ldn.set_geometry('buffered').set_crs(epsg=27700)\nax  = ldn.plot(facecolor=(.5, .5, .9, .5))\nmsoas.plot(ax=ax, facecolor='none', edgecolor=(.6, .6, .6, .6))\nax.set_xlim(500000, 515000)\nax.set_ylim(180000, 195000);\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-30-output-1.png){width=450 height=411}\n:::\n:::\n\n\n::::\n\nBy default we want do an _inner_ join because we want to drop everything that doesn't line up between the two data sets (i.e. don't keep the thousands of *other* non-London MSOAs).\n\n:::: {.qna}\n\n#### Question\n\n```python\nldn_msoas = gpd.sjoin(msoas, ldn, predicate='???', how='inner')\nldn_msoas.plot()\n```\n\n#### Answer\n\n::: {#4ce1191a .cell execution_count=30}\n``` {.python .cell-code}\nldn_msoas = gpd.sjoin(msoas, ldn, predicate='within', how='inner')\nldn_msoas.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-31-output-1.png){width=594 height=411}\n:::\n:::\n\n\n::::\n\n:::: {.qna}\n\n#### Question\n\nHmmmm, not quite what you were expecting? See if you can figure out from the list of columns and the documentation for `set_geometry` what is going wrong? This might also help:\n\n::: {#a648699f .cell execution_count=31}\n``` {.python .cell-code}\nprint(\", \".join(ldn_msoas.columns.to_list()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMSOA11CD, MSOA11NM, LAD11CD, LAD11NM, RGN11CD, RGN11NM, USUALRES, HHOLDRES, COMESTRES, POPDEN, HHOLDS, AVHHOLDSZ, geometry_left, index_right, geometry_right\n```\n:::\n:::\n\n\n#### Answer\n\n::: {#80b07984 .cell execution_count=32}\n``` {.python .cell-code}\nax = ldn_msoas.set_geometry('geometry_left').plot(linewidth=2, facecolor='none', edgecolor=(.6, .6, .6, .6))\nax.set_xlim(500000, 515000)\nax.set_ylim(180000, 195000)\n```\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-33-output-1.png){width=450 height=411}\n:::\n:::\n\n\n::::\n\nThe issue arises because we've joined two geo-data frames but the join function comes from pandas, which doesn't know anything about spatial data and we have therefore 'lost track' of the column in which the geometry is stored. *Worse*, there are actually two geometry columns now, so we need to tell Geopandas which one to use!\n\nThe easiest way to do this is to simply rename the geometry we *want* and then set is as the active geometry:\n\n::: {#600da05c .cell execution_count=33}\n``` {.python .cell-code}\nldn_msoas = ldn_msoas.rename(columns={'geometry_left':'geometry'}).set_geometry('geometry')\nldn_msoas.drop(columns='geometry_right', inplace=True)\n```\n:::\n\n\nWe also no longer really need to keep the full MSOA data set hanging about.\n\n::: {#48518944 .cell execution_count=34}\n``` {.python .cell-code}\ntry:\n    del(msoas)\nexcept NameError:\n    print(\"msoas already deleted.\")\n```\n:::\n\n\n:::: {.qna}\n\n#### Question\n\n- Can you explain *why* the outputs of the `dissolve` and `unary_union` *look* differnet? And use that as the basis for explaining why they *are* different?\n\n> Answer 1\n\n- How do you know that the units for the buffering operation are metres? 250 could be *anything* right?\n\n> Answer 2\n\n- Why do we need to buffer the London geometry *before* performing the *within* spatial join?\n\n> Answer 3\n\n#### Answer\n\n- Can you explain *why* the outputs of the `dissolve` and `unary_union` *look* differnet? And use that as the basis for explaining why they *are* different?\n\n> Dissolve is a method call that returns a new GeoDataFrame, while unary_union is a spatial operation that returns a primitive geometry. So we could capture the output of dissolve and just r\nename the columns, but from unary_union we need to write the primitive *into* a new GeoDataFrame as a geometry column.\n\n- How do you know that the units for the buffering operation are metres? 250 could be *anything* right?\n\n> It depends on the CRS! EPSG:27700 uses metres so the buffer operation is in metres.\n\n- Why do we need to buffer the London geometry *before* performing the *within* spatial join?\n\n> Because there may be small precision issues such that the MSOA borders cross the 'border' of the Thames and therefore no longer fall entirely within the London geometry. Try it yourself by changing the buffer amount!\n\n::::\n\n## Append or Derive Names\n\nWe don't actually make use of these in this session, but *both* operations could be relevant to your final reports:\n\n1. The Borough-to-Subregion mapping could help you to group your data into larger sets so that your resulst become more reobust. it also connects us to long-run patterns of socio-economic development in London.\n2. The MSOA Names data set (which you used above) gives you something that you could use to label one or more 'neighbourhoods' on a map with names that are *relevant*. So rather than talking about \"As you can see, Sutton 003, is...\", you can write \"The Wrythe neighbourhood [or area] of Sutton is significantly different from the surrounding areas...\"\n\nThey also usefully test your understanding of regular expressions and a few other aspects covered in previous weeks.\n\n### Replace\n\nYou've done this before: notice that the MSOA Name _contains_ the Borough name **with a space and some digits at the end**. Use a regex (in `str.replace()`) to extract the LA name from the MSOA name. See if you do this *without* having to find your previous answer!\n\n:::: {.qna}\n\n#### Question\n\n```python\nldn_msoas['Borough'] = ldn_msoas.MSOA11NM.str.replace(r'???','',regex=True)\n\n# Just check results look plausible; you should have:\n# - 33 boroughs\n# - A df shape of 983 x 13\nprint(ldn_msoas.Borough.unique())\nprint(f\"There are {len(ldn_msoas.Borough.unique())} boroughs.\")\nprint(f\"Overall shape of data frame is {' x '.join([str(x) for x in ldn_msoas.shape])}\")\n```\n\n#### Answer\n\n::: {#c42a817a .cell execution_count=35}\n``` {.python .cell-code}\nldn_msoas['Borough'] = ldn_msoas.MSOA11NM.str.replace(r' \\d+$','',regex=True)\n\n# Just check results look plausible; you should have:\n# - 33 boroughs\n# - A df shape of 983 x 13\nprint(ldn_msoas.Borough.unique())\nprint(f\"There are {len(ldn_msoas.Borough.unique())} boroughs.\")\nprint(f\"Overall shape of data frame is {' x '.join([str(x) for x in ldn_msoas.shape])}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['City of London' 'Barking and Dagenham' 'Barnet' 'Bexley' 'Brent'\n 'Bromley' 'Camden' 'Croydon' 'Ealing' 'Enfield' 'Greenwich' 'Hackney'\n 'Hammersmith and Fulham' 'Haringey' 'Harrow' 'Havering' 'Hillingdon'\n 'Hounslow' 'Islington' 'Kensington and Chelsea' 'Kingston upon Thames'\n 'Lambeth' 'Lewisham' 'Merton' 'Newham' 'Redbridge' 'Richmond upon Thames'\n 'Southwark' 'Sutton' 'Tower Hamlets' 'Waltham Forest' 'Wandsworth'\n 'Westminster']\nThere are 33 boroughs.\nOverall shape of data frame is 983 x 15\n```\n:::\n:::\n\n\n::::\n\n### Map\n\nNow that we've got the borough names we can set up a `mapping` dict here so that we can apply it as part of the `groupby` operation below (you should have 33 keys when done):\n\n::: {#83353df5 .cell execution_count=36}\n``` {.python .cell-code}\nmapping = {}\nfor b in ['Enfield','Waltham Forest','Redbridge','Barking and Dagenham','Havering','Greenwich','Bexley']:\n    mapping[b]='Outer East and North East'\nfor b in ['Haringey','Islington','Hackney','Tower Hamlets','Newham','Lambeth','Southwark','Lewisham']:\n    mapping[b]='Inner East'\nfor b in ['Bromley','Croydon','Sutton','Merton','Kingston upon Thames']:\n    mapping[b]='Outer South'\nfor b in ['Wandsworth','Kensington and Chelsea','Hammersmith and Fulham','Westminster','Camden']:\n    mapping[b]='Inner West'\nfor b in ['Richmond upon Thames','Hounslow','Ealing','Hillingdon','Brent','Harrow','Barnet','City of London']:\n    mapping[b]='Outer West and North West'\nprint(len(mapping.keys()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n33\n```\n:::\n:::\n\n\n:::: {.qna}\n\n#### Question\n\n```python\nldn_msoas['Subregion'] = ldn_msoas.Borough.map(???)\n```\n\n#### Answer\n\n::: {#a0c4466e .cell execution_count=37}\n``` {.python .cell-code}\nldn_msoas['Subregion'] = ldn_msoas.Borough.map(mapping)\n```\n:::\n\n\n::::\n\n### And Save\n\n::: {#dd6122ed .cell execution_count=38}\n``` {.python .cell-code}\nldn_msoas.to_parquet(os.path.join('data','geo','London_MSOA_Names.geoparquet'))\n```\n:::\n\n\n## Load InsideAirbnb Data\n\n::: {#864b1069 .cell execution_count=39}\n``` {.python .cell-code}\nlistings = gpd.read_parquet( cache_data(f'{host}/{path}/{ymd}-listings.geoparquet', ddir) ).to_crs(epsg=27700)\nprint(f\"Data frame is {listings.shape[0]:,} x {listings.shape[1]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFound data/geo/2023-09-06-listings.geoparquet locally!\nData frame is 85,134 x 31\n```\n:::\n:::\n\n\n### Spatial Join\n\nAssociate LA (Local Authority) names to the listings using a spatial join, but **notice** the `how` here:\n\n:::: {.qna}\n\n#### Question\n\n```python\ngdf_la = gpd.sjoin(listings, ???, predicate='???', how='left')\nprint(gdf_la.columns.to_list())\n```\n\n#### Answer\n\n::: {#65788e9a .cell execution_count=40}\n``` {.python .cell-code}\ngdf_la = gpd.sjoin(listings, boros, predicate='within', how='left')\nprint(f\"Have {gdf_la.shape[0]:,} rows in gdf_la\")\nprint(gdf_la.columns.to_list())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHave 85,134 rows in gdf_la\n['listing_url', 'last_scraped', 'name', 'description', 'host_id', 'host_name', 'host_since', 'host_location', 'host_is_superhost', 'host_listings_count', 'host_total_listings_count', 'host_verifications', 'latitude', 'longitude', 'property_type', 'room_type', 'accommodates', 'bathrooms_text', 'bedrooms', 'beds', 'amenities', 'price', 'minimum_nights', 'maximum_nights', 'availability_365', 'number_of_reviews', 'first_review', 'last_review', 'review_scores_rating', 'reviews_per_month', 'geometry', 'index_right', 'NAME', 'GSS_CODE', 'HECTARES', 'NONLD_AREA', 'ONS_INNER']\n```\n:::\n:::\n\n\n::::\n\n### Tidy Up\n\n::: {#574c38c3 .cell execution_count=41}\n``` {.python .cell-code}\ngdf_la.drop(columns=['index_right','HECTARES','NONLD_AREA','ONS_INNER'], inplace=True)\n```\n:::\n\n\nYou'll need to look closely to check that the `value_counts` output squares with your expectations. If you don't get `33` then there's an issue and you'll need to run the code in @sec-problems:\n\n::: {#67f2c6b1 .cell execution_count=42}\n``` {.python .cell-code}\nif len(gdf_la.NAME.unique()) == 33:\n    print(\"All good...\")\nelse:\n    print(\"Need to run the next section of code...\")\n    print(f\"Now there are... {len(gdf_la.NAME.unique())} boroughs?\")\n    gdf_la.NAME.value_counts(dropna=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAll good...\n```\n:::\n:::\n\n\n### Find Problematic Listings {#sec-problems}\n\nIf you were told that you need to run the next sectin of code then see if you can work out what happened...\n\n```python\ntry:\n    print(gdf_la[gdf_la.NAME.isna()].sample(2)[['name', 'NAME']])\n    ax = gdf_la[gdf_la.NAME.isna()].plot(figsize=(9,6), markersize=5, alpha=0.5)\n    boros.plot(ax=ax, edgecolor='r', facecolor='None', alpha=0.5);\nexcept ValueError as e:\n   pass\n```\n\nIn short: in some cases there may be records that fall outside of London because of Airbnb's shuffling approach:\n\n```python\ngdf_la.drop(index=gdf_la[gdf_la.NAME.isna()].index, axis=1, inplace=True)\nprint(f\"Data frame is {gdf_la.shape[0]:,} x {gdf_la.shape[1]}\")\n```\n\n### Check and Save\n\n```python\nax = gdf_la.plot(column='NAME', markersize=0.5, alpha=0.5, figsize=(9,7))\nboros.plot(ax=ax, edgecolor='r', facecolor='None', alpha=0.5);\n```\n\nYou should get the following:\n\n::: {#cb3866e8 .cell execution_count=43}\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-44-output-1.png){width=749 height=559}\n:::\n:::\n\n\n```python\ngdf_la.to_parquet(os.path.join('data','geo','Listings_with_LA.geoparquet'))\n```\n\n:::: {.qna}\n\n#### Question\n\n- Do you understand the difference between `how='inner'` and `how='left'`? \n\n> \n\n#### Answer\n\n- Do you understand the difference between `how='inner'` and `how='left'`?\n\n> Left joins preserve *all* records on the left table *regardless* of whether they match something in the right table. In this case, because it's a *spatial* join we keep the listings *regardless* of whether they fall within the London boroughs. Inner joins preserve *only* the records that match between left and right, so in this case if you did a spatial inner join you'd only get the records that fall within a London borough. Right joins do about what you'd expect (not very helpful in this example). Outer joins preserve everything in both tables which, in a spatial context, would probably be a little hard to interpret.\n\n::::\n\n## Create LA Data\n\nNow that we've assigned every listing to a borough, we can derive aggregate values for different groups of zones.\n\n### Select LA\n\nSelect a LA that is relevant to _you_ to explore further...\n\n::: {#1604abeb .cell execution_count=44}\n``` {.python .cell-code}\nLA = 'Waltham Forest'\n```\n:::\n\n\n### Spatial Join\n\nThe first thing we want to do is join MSOA identifiers to each listing. In both cases we want to constrain the data to only be for 'our' LA of interest since that will speed up the process substantially: \n\n::: {#68b60dea .cell execution_count=45}\n``` {.python .cell-code}\ngdf_msoa = gpd.sjoin(\n            gdf_la[gdf_la.NAME==LA].reset_index(), \n            ldn_msoas[ldn_msoas.Borough==LA][['MSOA11CD','MSOA11NM','USUALRES','HHOLDS','Subregion','geometry']], predicate='within')\ngdf_msoa.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=286}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>listing_url</th>\n      <th>last_scraped</th>\n      <th>name</th>\n      <th>description</th>\n      <th>host_id</th>\n      <th>host_name</th>\n      <th>host_since</th>\n      <th>host_location</th>\n      <th>host_is_superhost</th>\n      <th>...</th>\n      <th>reviews_per_month</th>\n      <th>geometry</th>\n      <th>NAME</th>\n      <th>GSS_CODE</th>\n      <th>index_right</th>\n      <th>MSOA11CD</th>\n      <th>MSOA11NM</th>\n      <th>USUALRES</th>\n      <th>HHOLDS</th>\n      <th>Subregion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>41870</td>\n      <td>https://www.airbnb.com/rooms/41870</td>\n      <td>2023-09-07</td>\n      <td>Home in Walthamstow · 2 bedrooms · 1 bed · 2.5...</td>\n      <td>Lovely friendly house, close to central line u...</td>\n      <td>182993</td>\n      <td>Bimpe</td>\n      <td>2010-07-27</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0.01</td>\n      <td>POINT (538919.280 186290.652)</td>\n      <td>Waltham Forest</td>\n      <td>E09000031</td>\n      <td>888</td>\n      <td>E02000921</td>\n      <td>Waltham Forest 027</td>\n      <td>11001</td>\n      <td>3966</td>\n      <td>Outer East and North East</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>78606</td>\n      <td>https://www.airbnb.com/rooms/78606</td>\n      <td>2023-09-07</td>\n      <td>Rental unit in Walthamstow · 1 bedroom · 1 pri...</td>\n      <td>Comfortable, modern home with a friendly host ...</td>\n      <td>422362</td>\n      <td>Nicola</td>\n      <td>2011-03-04</td>\n      <td>London, United Kingdom</td>\n      <td>False</td>\n      <td>...</td>\n      <td>0.04</td>\n      <td>POINT (539419.512 187953.652)</td>\n      <td>Waltham Forest</td>\n      <td>E09000031</td>\n      <td>882</td>\n      <td>E02000915</td>\n      <td>Waltham Forest 021</td>\n      <td>8643</td>\n      <td>3305</td>\n      <td>Outer East and North East</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 40 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Aggregate\n\nNow aggregate the data by MSOA, deriving median price and a count of the listings:\n\n::: {#e867e2d5 .cell execution_count=46}\n``` {.python .cell-code}\ngrdf_msoa = gdf_msoa.groupby('MSOA11NM').agg(\n    listing_count = ('price','count'),\n    median_price = ('price','median')\n).reset_index()\nprint(f\"Have {grdf_msoa.shape[0]:,} rows and {grdf_msoa.shape[1]:,} columns\")\ngrdf_msoa.head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHave 28 rows and 3 columns\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=287}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSOA11NM</th>\n      <th>listing_count</th>\n      <th>median_price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Waltham Forest 001</td>\n      <td>17</td>\n      <td>97.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Waltham Forest 002</td>\n      <td>14</td>\n      <td>58.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Join (Again)\n\nHere we see the **difference between merge and join**. You'll notice that `join` operates by taking one data frame as the implicit '*left*' table (the one which *calls* join) while the one that is passed to the join function is, implicitly, the '*right*' table. Join operates only using indexes, so you'll need to insert the code to specify the same index on both data frames, but this can be done **on-the-fly** as part of the joining operation:\n\n::: {#3ad4b88b .cell execution_count=47}\n``` {.python .cell-code}\nmsoa_gdf = grdf_msoa.set_index('MSOA11NM').join(\n                ldn_msoas[ldn_msoas.Borough==LA].set_index('MSOA11NM'), \n                rsuffix='_r').set_geometry('geometry')\nmsoa_gdf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=288}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>listing_count</th>\n      <th>median_price</th>\n      <th>MSOA11CD</th>\n      <th>LAD11CD</th>\n      <th>LAD11NM</th>\n      <th>RGN11CD</th>\n      <th>RGN11NM</th>\n      <th>USUALRES</th>\n      <th>HHOLDRES</th>\n      <th>COMESTRES</th>\n      <th>POPDEN</th>\n      <th>HHOLDS</th>\n      <th>AVHHOLDSZ</th>\n      <th>geometry</th>\n      <th>index_right</th>\n      <th>Borough</th>\n      <th>Subregion</th>\n    </tr>\n    <tr>\n      <th>MSOA11NM</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Waltham Forest 001</th>\n      <td>17</td>\n      <td>97.0</td>\n      <td>E02000895</td>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E12000007</td>\n      <td>London</td>\n      <td>7979</td>\n      <td>7962</td>\n      <td>17</td>\n      <td>36.4</td>\n      <td>3271</td>\n      <td>2.4</td>\n      <td>MULTIPOLYGON (((537919.442 195742.428, 538051....</td>\n      <td>0</td>\n      <td>Waltham Forest</td>\n      <td>Outer East and North East</td>\n    </tr>\n    <tr>\n      <th>Waltham Forest 002</th>\n      <td>14</td>\n      <td>58.0</td>\n      <td>E02000896</td>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E12000007</td>\n      <td>London</td>\n      <td>8814</td>\n      <td>8719</td>\n      <td>95</td>\n      <td>31.3</td>\n      <td>3758</td>\n      <td>2.3</td>\n      <td>MULTIPOLYGON (((539172.688 195540.000, 539696....</td>\n      <td>0</td>\n      <td>Waltham Forest</td>\n      <td>Outer East and North East</td>\n    </tr>\n    <tr>\n      <th>Waltham Forest 003</th>\n      <td>7</td>\n      <td>89.0</td>\n      <td>E02000897</td>\n      <td>E09000031</td>\n      <td>Waltham Forest</td>\n      <td>E12000007</td>\n      <td>London</td>\n      <td>8077</td>\n      <td>7991</td>\n      <td>86</td>\n      <td>42.9</td>\n      <td>3345</td>\n      <td>2.4</td>\n      <td>MULTIPOLYGON (((538862.624 194017.438, 539001....</td>\n      <td>0</td>\n      <td>Waltham Forest</td>\n      <td>Outer East and North East</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n```python\nmsoa_gdf.plot(column='median_price', legend=True, figsize=(8,8));\n```\n\nYou should get something like:\n\n::: {#9a96b36e .cell execution_count=48}\n\n::: {.cell-output .cell-output-display}\n![](Practical-08-Selecting_Data_files/figure-html/cell-49-output-1.png){width=492 height=633}\n:::\n:::\n\n\n### Save\n\nJust so that we can pick up here without having to re-run all the preceding cells.\n\n::: {#cb6f9a4d .cell execution_count=49}\n``` {.python .cell-code}\nmsoa_gdf.to_parquet(os.path.join('data','geo',f'{LA}-MSOA_data.geoparquet'))\n```\n:::\n\n\n:::: {.qna}\n\n#### Question\n\n- Do you understand the differences between `pd.merge` and `df.join`? and `gpd.sjoin`?\n\n> \n\n- Do you understand why it may be necessary to `set_geometry` in some cases?\n\n> \n\n#### Answer\n\n- Do you understand the differences between `pd.merge` and `df.join`? and `gpd.sjoin`?\n\n> Obviously one of these three is spatial in nature, but beyond that there is a *lot* of overlap and great deal depends on the logic or the linkage. `join` is relatively limited in functionality but is fairly clear about the relationships: if the indexes don't match it doesn't produce anything. `merge` is actually (functionally, at least) more similar to `sjoin` than `sjoin` is to `join` -- this is slightly confusing but can probably be traced back to Pandas' origins in panel data research whereas Geopandas' is more technically correct in its terminology because of the influence of GIS.\n\n- Do you understand why it may be necessary to `set_geometry` in some cases?\n\n> Joins are DataFrame functionality and so are unaware of GeoDataFrames (so the return type devolves to a DataFrame), whereas merges seem to preserve the child class type and mean that a GeoDataFrame is returned even thought this is *also* a Pandas utility function.\n\n::::\n\n",
    "supporting": [
      "Practical-08-Selecting_Data_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
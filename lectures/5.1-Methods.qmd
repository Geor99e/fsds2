---
format:
  revealjs:
    theme: [serif, slides.scss]
    embed-resources: true
author: "Jon Reades"
title: "Methods"
footer: "Methods • Jon Reades"
highlight-style: github
code-copy: true
code-line-numbers: true
slide-level: 2
title-slide-attributes:
  data-background-image: ../img/CASA_Logo_no_text.png
  data-background-size: cover
  data-background-position: center
  data-background-opacity: '0.17'
logo: ../img/CASA_logo.png
history: false
css: slides.css
---

## Today's Question

We know that a [function](./3.4-Functions.qmd) looks like this:
```python
<function name>( <input> )
```
And we know that a [function in a package](./3.5-Packages.qmd) looks like this:
```python
<package name>.<function name>( <input> )
```
So is `list` a package?
```python
my_list.append( <value> )
```


## Well...

`my_list.append( <value> )` _is_ a function.

`my_list.append( <value> )` is a special *type* of function called a *method*.


## What's a Method Then?

*Packages* group useful constants and functions together in one place. 

*Methods* group constants and functions together in one place **with data**. 

So `my_list.append(...)` is called a **list method**: 

- It *only* knows how to append things to lists.
- It is *only* available as a function when you have an *insantiated* list (e.g. `[]` or `[1,'dog',3.5]`).
- It is *bound* to variables (aka. objects) of *class* list.


## Proof! {.smaller}

```python
my_list = [] # 
help(my_list)
```
This will give you:
```python
Help on list object:

class list(object)
 |  list(iterable=(), /)
 |  Built-in mutable sequence.
 |  If no argument is given, the constructor creates a new empty list.
 |  Methods defined here:
 | ...
 |  append(self, object, /)
 |      Append object to the end of the list.
 |
 |  clear(self, /)
 |      Remove all items from list.
 |
 |  copy(self, /)
 |      Return a shallow copy of the list.
 | ...
```

::: {.notes}
It's not obvious here, but you can also create lists by writing `list()`.
:::


## It's *all* Methods {.smaller}

```python
msg = 'Hello World'
dir(msg)
['__add__', '__class__', ..., 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', ... 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
```

And then we can inquire about these methods:
```python
help(msg.capitalize)
Help on built-in function capitalize:

capitalize() method of builtins.str instance
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
```

# *Everything* in Python is an Object

`my_list = []` can also be written `my_list = list()`, and `my_string = 'Foo'` can be written `my_string = str('Foo')`. 

::: {.notes}
Methods are functions (or constants) that are bound to an object from a class – so lists can append, but strings cannot (they concatenate using ‘+’)
:::

## Final Fundamental Concepts

From here on out, *nearly* all of what you learn will be new _applications_, not new _concepts_ and _terminology_.

| Term | Means | Example |
| :--- | :------------ | :---------- |
| Class | The _template_ for a 'thing'. | Recipe for a pizza. |
| Object | The instantiated 'thing'. | A pizza I can eat! |
| Method | Functions defined for the _class_ and available to the _object_. | Things I can do with a pizza (eat, cook, make). |
| Constructor | The special method that builds new objects of that class. | How to start a new pizza! |
| Self | A reference to the current object. | The pizza in front of me! |

